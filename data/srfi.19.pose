(((name . "time-duration") (signature value time-type) (desc . "Symbol representing Time duration."))
 ((name . "time-monotonic") (signature value time-type) (desc . "Symbol representing monotonic time."))
 ((name . "time-process") (signature value time-type) (desc . "Symbol representing time spent in current process."))
 ((name . "time-tai") (signature value time-type) (desc . "Symbol representing TAI time."))
 ((name . "time-thread") (signature value time-type) (desc . "Symbol representing time spent in current thread."))
 ((name . "time-utc") (signature value time-type) (desc . "Symbol representing UTC time."))
 ((name . "current-date")
  (signature case-lambda (() date?) (((integer? tz-offset)) date?))
  (desc . "Date corresponding to the current UTC time. "))
 ((name . "current-julian-day") (signature lambda () real?) (desc . "Current Julian Day."))
 ((name . "current-modified-julian-day") (signature lambda () real?) (desc . "Current Modified Julian Day."))
 ((name . "current-time")
  (signature case-lambda (() time?) (((time-type type)) time?))
  (desc . "Current time, of type time-type system, which defaults to TIME-UTC."))
 ((name . "time-resolution")
  (signature case-lambda (() integer?) (((time-type type)) integer?))
  (desc . "Clock resolution, in nanoseconds, of the system clock of type type time-type system, which defaults to TIME-UTC."))
 ((name . "make-time")
  (signature
   lambda
   ((time-type type) (integer? nanosecond) (integer? second))
   time?)
  (tags pure)
  (desc . "Creates a time object."))
 ((name . "time?") (signature lambda (obj) boolean?) (tags pure predicate) (desc . "#t if object is a time object, otherwise, #f."))
 ((name . "time-type") (signature lambda ((time? time)) time-type) (tags pure) (desc . "Time type."))
 ((name . "time-nanosecond")
  (signature lambda ((time? time)) integer?)
  (tags pure)
  (desc . "Time nanosecond."))
 ((name . "time-second")
  (signature lambda ((time? time)) integer?)
  (tags pure)
  (desc . "Time second."))
 ((name . "set-time-type!")
  (signature lambda ((time? time) (time-type time-type)) undefined)
  (desc . "Changes time type. Note: This changes the semantics of the time object. To convert a time to another system of representation, use one of the conversion procedures."))
 ((name . "set-time-nanosecond!")
  (signature lambda ((time? time) (integer? nanosecond)) undefined)
  (desc . "Changes time nanosecond."))
 ((name . "set-time-second!")
  (signature lambda ((time? time) (integer? second)) undefined)
  (desc . "Changes time second."))
 ((name . "copy-time") (signature lambda ((time? time)) time?) (tags pure) (desc . "Creates a new time object, with the same time type, nanosecond, and second as time1."))
 ((name . "time<=?")
  (signature lambda ((time? time1) (time? time2)) boolean?)
  (tags pure)
  (desc . "#t if time1 is before or at (less than or equal to) time2, #f otherwise. "))
 ((name . "time<?")
  (signature lambda ((time? time1) (time? time2)) boolean?)
  (tags pure)
  (desc . "#t if time1 is before (less than) time2, #f otherwise. "))
 ((name . "time=?")
  (signature lambda ((time? time1) (time? time2)) boolean?)
  (tags pure)
  (desc . "#t if time1 at (equal) time2, #f otherwise. "))
 ((name . "time>=?")
  (signature lambda ((time? time1) (time? time2)) boolean?)
  (tags pure)
  (desc . "#t if time1 is at or after (greater than or equal to) time2, #f otherwise. "))
 ((name . "time>?")
  (signature lambda ((time? time1) (time? time2)) boolean?)
  (tags pure)
  (desc . "#t if time1 is after (greater than) time2, #f otherwise."))
 ((name . "time-difference")
  (signature lambda ((time? time1) (time? time2)) time?)
  (tags pure)
  (desc . "The TIME-DURATION between time1 and time2. It is an error if time1 and time2 are of different time types. A new time object is created."))
 ((name . "time-difference!")
  (signature lambda ((time? time1) (time? time2)) time?)
  (desc . "The TIME-DURATION between time1 and time2. It is an error if time1 and time2 are of different time types. Time1 may be used to create the resulting TIME-DURATION object."))
 ((name . "add-duration")
  (signature lambda ((time? time1) (time? time-duration)) time?)
  (tags pure)
  (desc . "The time resulting from adding time-duration to time1, which is a time object of the same time type as time1. A new time object is created."))
 ((name . "add-duration!")
  (signature lambda ((time? time1) (time? time-duration)) time?)
  (desc . "The time resulting from adding time-duration to time1, which is a time object of the same time type as time1. Time1 may used to create the resulting time object."))
 ((name . "subtract-duration")
  (signature lambda ((time? time1) (time? time-duration)) time?)
  (tags pure)
  (desc . "The time resulting from subtracting time-duration from time1, which is a time object of the same time type as time1. A new time object is created."))
 ((name . "subtract-duration!")
  (signature lambda ((time? time1) (time? time-duration)) time?)
  (desc . "The time resulting from subtracting time-duration from time1, which is a time object of the same time type as time1. Time1 may used to create the resulting time object."))
 ((name . "make-date")
  (signature
   lambda
   ((integer? nanosecond)
    (integer? second)
    (integer? minute)
    (integer? hour)
    (integer? day)
    (integer? month)
    (integer? year)
    (integer? zone-offset))
   date?)
  (tags pure)
  (desc . "Creates a date object."))
 ((name . "date?") (signature lambda (obj) boolean?) (tags pure predicate) (desc . "#t if object is a time object, otherwise, #f."))
 ((name . "date-nanosecond")
  (signature lambda ((date? date)) integer?)
  (tags pure)
  (desc . "Date nanosecond."))
 ((name . "date-second")
  (signature lambda ((date? date)) integer?)
  (tags pure)
  (desc . "Date second."))
 ((name . "date-minute")
  (signature lambda ((date? date)) integer?)
  (tags pure)
  (desc . "Date minute."))
 ((name . "date-hour") (signature lambda ((date? date)) integer?) (tags pure) (desc . "Date hour."))
 ((name . "date-day") (signature lambda ((date? date)) integer?) (tags pure) (desc . "Date day."))
 ((name . "date-month") (signature lambda ((date? date)) integer?) (tags pure) (desc . "Date month."))
 ((name . "date-year") (signature lambda ((date? date)) integer?) (tags pure) (desc . "Date year."))
 ((name . "date-zone-offset")
  (signature lambda ((date? date)) integer?)
  (tags pure)
  (desc . "Date time zone offset."))
 ((name . "date-year-day")
  (signature lambda ((date? date)) integer?)
  (tags pure)
  (desc . "The ordinal day of the year of this date. January 1 is 1, etc."))
 ((name . "date-week-day")
  (signature lambda ((date? date)) integer?)
  (tags pure)
  (desc . "The day of the week of this date, where Sunday=0, Monday=1, etc."))
 ((name . "date-week-number")
  (signature
   lambda
   ((date? date) (integer? day-of-week-starting-week))
   integer?)
  (tags pure)
  (desc . "The ordinal week of the year which holds this date, ignoring a first partial week. 'Day-of-week-starting-week' is the integer corresponding to the day of the week which is to be considered the first day of the week (Sunday=0, Monday=1, etc.)."))
 ((name . "date->julian-day")
  (signature lambda ((date? date)) real?)
  (tags pure)
  (desc . "Convert date to Julian Day."))
 ((name . "date->modified-julian-day")
  (signature lambda ((date? date)) real?)
  (tags pure)
  (desc . "Convert date to Modified Julian Day."))
 ((name . "date->time-monotonic")
  (signature lambda ((date? date)) time?)
  (tags pure)
  (desc . "Convert date to monotonic time."))
 ((name . "date->time-tai")
  (signature lambda ((date? date)) time?)
  (tags pure)
  (desc . "Convert date to TAI time."))
 ((name . "date->time-utc")
  (signature lambda ((date? date)) time?)
  (tags pure)
  (desc . "Convert date to UTC time."))
 ((name . "julian-day->date")
  (signature
   case-lambda
   (((real? jd)) date?)
   (((real? jd) (integer? tz-offset)) date?))
  (tags pure)
  (desc . "Convert Julian Day to date, , using time zone offset, which defaults to the local time zone."))
 ((name . "julian-day->time-monotonic")
  (signature lambda ((real? jd)) time?)
  (tags pure)
  (desc . "Convert Julian Day to monotonic time."))
 ((name . "julian-day->time-tai")
  (signature lambda ((real? jd)) time?)
  (tags pure)
  (desc . "Convert Julian Day to TAI time."))
 ((name . "julian-day->time-utc")
  (signature lambda ((real? jd)) time?)
  (tags pure)
  (desc . "Convert Julian Day to UTC time."))
 ((name . "modified-julian-day->date")
  (signature
   case-lambda
   (((real? jd)) date?)
   (((real? jd) (integer? tz-offset)) date?))
  (tags pure)
  (desc . "Convert Modified Julian Day to date, using time zone offset, which defaults to the local time zone. "))
 ((name . "modified-julian-day->time-monotonic")
  (signature lambda ((real? jd)) time?)
  (tags pure)
  (desc . "Convert Modified Julian Day to monotonic time."))
 ((name . "modified-julian-day->time-tai")
  (signature lambda ((real? jd)) time?)
  (tags pure)
  (desc . "Convert Modified Julian Day to TAI time."))
 ((name . "modified-julian-day->time-utc")
  (signature lambda ((real? jd)) time?)
  (tags pure)
  (desc . "Convert Modified Julian Day to UTC time."))
 ((name . "time-monotonic->date")
  (signature
   case-lambda
   (((time? time-monotonic)) date?)
   (((time? time-monotonic) (integer? tz-offset)) date?))
  (tags pure)
  (desc . "Convert monotonic time to date, using time zone offset, which defaults to the local time zone."))
 ((name . "time-monotonic->julian-day")
  (signature lambda ((time? time-monotonic)) real?)
  (tags pure)
  (desc . "Convert monotonic time to Julian Day."))
 ((name . "time-monotonic->modified-julian-day")
  (signature lambda ((time? time-monotonic)) real?)
  (tags pure)
  (desc . "Convert monotonic time to Modified Julian Day."))
 ((name . "time-monotonic->time-tai")
  (signature lambda ((time? time-monotonic)) time?)
  (tags pure)
  (desc . "Convert monotonic time to TAI time."))
 ((name . "time-monotonic->time-tai!")
  (signature lambda ((time? time-monotonic)) time?)
  (desc . "Convert monotonic time to TAI time. The time structure may be reused."))
 ((name . "time-monotonic->time-utc")
  (signature lambda ((time? time-monotonic)) time?)
  (tags pure)
  (desc . "Convert monotonic time to UTC time."))
 ((name . "time-monotonic->time-utc!")
  (signature lambda ((time? time-monotonic)) time?)
  (desc . "Convert monotonic time to UTC time. The time structure may be reused."))
 ((name . "time-tai->date")
  (signature
   case-lambda
   (((time? time-tai)) date?)
   (((time? time-tai) (integer? tz-offset)) date?))
  (tags pure)
  (desc . "Convert TAI time to date, using time zone offset, which defaults to the local time zone."))
 ((name . "time-tai->julian-day")
  (signature lambda ((time? time-tai)) real?)
  (tags pure)
  (desc . "Convert TAI time to Julian Day."))
 ((name . "time-tai->modified-julian-day")
  (signature lambda ((time? time-tai)) real?)
  (tags pure)
  (desc . "Convert TAI time to Modified Julian Day."))
 ((name . "time-tai->time-monotonic")
  (signature lambda ((time? time-tai)) time?)
  (tags pure)
  (desc . "Convert TAI time to monotonic time."))
 ((name . "time-tai->time-monotonic!")
  (signature lambda ((time? time-tai)) time?)
  (desc . "Convert TAI time to monotonic time. The time structure may be reused."))
 ((name . "time-tai->time-utc")
  (signature lambda ((time? time-tai)) time?)
  (tags pure)
  (desc . "Convert TAI time to UTC time."))
 ((name . "time-tai->time-utc!") 
  (signature lambda ((time? time-tai)) time?)
  (desc . "Convert TAI time to UTC time. The time structure may be reused."))
 ((name . "time-utc->date")
  (signature
   case-lambda
   (((time? time-utc)) date?)
   (((time? time-utc) (integer? tz-offset)) date?))
  (tags pure)
  (desc . "Convert UTC time to date, using time zone offset, which defaults to the local time zone."))
 ((name . "time-utc->julian-day")
  (signature lambda ((time? time-utc)) real?)
  (tags pure)
  (desc . "Convert UTC time to Julian Day"))
 ((name . "time-utc->modified-julian-day")
  (signature lambda ((time? time-utc)) real?)
  (tags pure)
  (desc . "Convert UTC time to Modified Julian Day."))
 ((name . "time-utc->time-tai")
  (signature lambda ((time? time-utc)) time?)
  (tags pure)
  (desc . "Convert UTC time to TAI time. "))
 ((name . "time-utc->time-tai!") (signature lambda ((time? time-utc)) time?) (desc . "Convert UTC time to TAI time. The time structure may be reused."))
 ((name . "date->string")
  (signature
   case-lambda
   (((date? date)) string?)
   (((date? date) (string? format-string)) string?))
  (tags pure)
  (desc . "Converts a date to a string, using the format string. The format string is copied as is; except escape characters (indicated by the tilde) are replaced with specific conversions.
~~ a literal ~
~a locale's abbreviated weekday name (Sun...Sat)
~A locale's full weekday name (Sunday...Saturday)
~b locale's abbreviate month name (Jan...Dec)
~B locale's full month day (January...December)
~c locale's date and time (e.g., \"Fri Jul 14 20:28:42-0400 2000\")
~d day of month, zero padded (01...31)
~D date (mm/dd/yy)
~e day of month, blank padded ( 1...31)
~f seconds+fractional seconds, using locale's decimal separator (e.g. 5.2).
~h same as ~b
~H hour, zero padded, 24-hour clock (00...23)
~I hour, zero padded, 12-hour clock (01...12)
~j day of year, zero padded
~k hour, blank padded, 24-hour clock ( 0...23)
~l hour, blank padded, 12-hour clock ( 1...12)
~m month, zero padded (01...12)
~M minute, zero padded (00...59)
~n new line
~N nanosecond, zero padded
~p locale's AM or PM
~r time, 12 hour clock, same as \"~I:~M:~S ~p\"
~s number of full seconds since \"the epoch\" (in UTC)
~S second, zero padded (00...60)
~t horizontal tab
~T time, 24 hour clock, same as \"~H:~M:~S\"
~U week number of year with Sunday as first day of week (00...53)
~V ISO 8601 week number of the year with Monday as first day of week (01..53)[1]
~w day of week (0...6)
~W week number of year with Monday as first day of week (01...52)
~x locale's date representation[1]
~X locale's time representation[1]
~y last two digits of year (00...99)
~Y year
~z time zone in RFC-822 style
~Z symbol time zone (not-implemented)
~1 ISO-8601 year-month-day format
~2 ISO-8601 hour-minute-second-timezone format
~3 ISO-8601 hour-minute-second format
~4 ISO-8601 year-month-day-hour-minute-second-timezone format
~5 ISO-8601 year-month-day-hour-minute-second format"))
 ((name . "string->date")
  (signature lambda ((string? input-string) (string? template-string)) date?)
  (tags pure)
  (desc . "Converts an input string to a date, using the template string. The input string must match the template string as is; except escape characters (indicate by the tilde) indicate special converters which (1) move to the next character in the input string fulfilling a criterion; (2) read a value, and (3) act on this value in some way.

Char: ~~. Skip to: any. Read: read literal ~ . Set: nothing.
Char: ~a. Skip to: char-alphabetic?. Read: abbreviated weekday in locale . Set: nothing.
Char: ~A. Skip to: char-alphabetic?. Read: full weekday in locale . Set: nothing.
Char: ~b. Skip to: char-alphabetic?. Read: abbreviated month name in locale . Set: nothing.
Char: ~B. Skip to: char-alphabetic?. Read: full month name in locale . Set: nothing.
Char: ~d. Skip to: char-numeric?. Read: day of month . Set: date-day.
Char: ~e. Skip to: any. Read: day of month, blank padded . Set: date-day.
Char: ~h. Skip to: char-alphabetic?. Read: same as ~b . Set: nothing.
Char: ~H. Skip to: char-numeric?. Read: hour . Set: date-hour.
Char: ~k. Skip to: any. Read: hour, blank padded . Set: date-hour.
Char: ~m. Skip to: char-numeric?. Read: month . Set: date-month.
Char: ~M. Skip to: char-numeric?. Read: minute . Set: date-minute.
Char: ~S. Skip to: char-numeric?. Read: second . Set: date-second.
Char: ~y. Skip to: any. Read: 2-digit year . Set: date-year within 50 years.
Char: ~Y. Skip to: char-numeric?. Read: year . Set: date-year.
Char: ~z. Skip to: any. Read: time zone . Set: date-zone-offset.")))
