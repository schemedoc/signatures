(((name . "s8vector?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (desc . "Returns #t if the if an object is homogenous s8vector, #f otherwise."))
 ((name . "make-s8vector")
  (signature
   case-lambda
   (((integer? size)) s8vector?)
   (((integer? size) (integer? fill)) s8vector?))
  (tags pure)
  (desc . "Create homogenous s8 vector. If fill is given, it must be signed exact integer in the range -(2^7) to (2^7)-1. If fill isn't given, vector is filled with unspecified values which are guaranteed to fit into the range of the s8vector."))
 ((name . "s8vector")
  (signature lambda ((integer? value) ...) s8vector?)
  (tags pure)
  (desc . "Create homogenous s8 vector. Each value must be signed exact integer in the range -(2^7) to (2^7)-1."))
 ((name . "s8vector-length")
  (signature lambda ((s8vector? vec)) integer?)
  (tags pure)
  (desc . "Returns the number of elements in s8vector as an exact integer."))
 ((name . "s8vector-ref")
  (signature lambda ((s8vector? vec) (integer? i)) integer?)
  (tags pure)
  (desc . "Returns i-th element in the vector. i must be in range [0, (s8vector-length vec))"))
 ((name . "s8vector-set!")
  (signature lambda ((s8vector? vec) (integer? i) (integer? value)) undefined)
  (desc . "s8vector-set! stores value in element k of vector. Value must be signed exact integer in the range -(2^7) to (2^7)-1. i must be in range [0, (s8vector-length vec))"))
 ((name . "s8vector->list")
  (signature lambda ((s8vector? vec)) list?)
  (tags pure)
  (desc . "Converts a homogenous vector to a list."))
 ((name . "list->s8vector")
  (signature lambda ((list? proper-list)) s8vector?)
  (subsigs
    (proper-list (list integer?)))
  (tags pure)
  (desc . "Converts a list to a homogenous s8vector. Each element in input list must be signed exact integer in the range -(2^7) to (2^7)-1.")))
