(((group
    ((name . "comparator-max")
     (signature lambda ((comparator? comarator) obj1 obj2 ...) *)
     (tags pure))
    ((name . "comparator-min")
     (signature lambda ((comparator? comarator) obj1 obj2 ...) *)
     (tags pure))
    ((name . "comparator-max-in-list")
     (signature lambda ((comparator? comarator) (list? list)) *)
     (tags pure))
    ((name . "comparator-min-in-list")
     (signature lambda ((comparator? comarator) (list? list)) *)
     (tags pure)))
  (desc . " These procedures are analogous to min and max respectively, but may be applied to any orderable objects, not just to real numbers. They apply the ordering procedure of comparator to the objects to find and return a minimal (or maximal) object. The order in which the values are compared is unspecified. If two objects are equal in the sense of the comparator, either may be returned.
The -in-list versions accept a single list argument."))
 ((name . "default-comparator")
  (signature value comparator?)
  (desc . "A pre-created default comparator. It should behave exactly like a comparator returned by SRFI 128 make-default-comparator."))
 ((name . "boolean-comparator")
  (signature value comparator?)
  (desc . "A comparator for booleans such that #f compares before #t."))
 ((name . "real-comparator")
  (signature value comparator?)
  (desc . "A comparator for real numbers such that smaller numbers compare before larger numbers."))
 ((name . "char-comparator")
  (signature value comparator?)
  (desc . "A comparator for characters using Unicode codepoint order."))
 ((name . "char-ci-comparator")
  (signature value comparator?)
  (desc . "A comparator for characters using char-ci<?."))
 ((name . "string-comparator")
  (signature value comparator?)
  (desc . "A comparator for strings using the implementation-specific definition of string<?."))
 ((name . "string-ci-comparator")
  (signature value comparator?)
  (desc . "A comparator for strings using the implementation-specific definition of string-ci<?."))
 ((name . "pair-comparator")
  (signature value comparator?)
  (desc . "Compares pairs as if by the application of make-pair-comparator to pairs with default-comparator as the car and cdr comparators."))
 ((name . "list-comparator")
  (signature value comparator?)
  (desc . "Compares lists as if by the application of make-list-comparator to lists with default-comparator as the element comparator."))
 ((name . "vector-comparator")
  (signature value comparator?)
  (desc . "Compares vectors as if by the application of make-vector-comparator to vectors with default-comparator as the element comparator."))
 ((group
    ((name . "eq-comparator")
     (signature value comparator?))
    ((name . "eqv-comparator")
     (signature value comparator?))
    ((name . "equal-comparator")
     (signature value comparator?)))
  (desc . "comparators whose functions behave as follows:
* The type test returns #t in all cases.
* The equality functions are eq?, eqv?, and equal? respectively.
* The ordering function is implementation-defined, except that it must conform to the rules for ordering functions. It may signal an error instead.
* The hash function is default-hash.
These comparators accept circular structure (in the case of equal-comparator, provided the implementation's equal? predicate does so) and NaNs.")))
