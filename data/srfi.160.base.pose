(
((name . "make-u8vector")
 (signature
   case-lambda
   (((integer? size)) u8vector?)
   (((integer? size) (u8? fill)) u8vector?))
 (tags pure)
 (desc . "Returns a u8vector whose length is size. If fill is provided, all the elements of the u8vector are initialized to it."))
((name . "u8vector") 
 (signature lambda ((u8? value) ...) u8vector?)
 (tags pure)
 (desc . "Returns a u8vector initialized with values."))
((name . "u8vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a u8vector, and #f otherwise."))
((name . "u8vector-length")
 (signature lambda ((u8vector? u8vec)) integer?)
 (tags pure)
 (desc . "Returns the length of u8vec"))
((name . "u8vector-ref")
 (signature lambda ((u8vector? u8vec) (integer? i)) u8?)
 (tags pure)
 (desc . "Returns the ith element of u8vec."))
((name . "u8vector-set!")
 (signature lambda ((u8vector? u8vec) (integer? i) (u8? value)) undefined)
 (desc . "Sets the ith element of u8vec to value."))
((name . "u8vector->list")
 (signature
   case-lambda
   (((u8vector? u8vec)) list?)
   (((u8vector? u8vec) (integer? start)) list?)
   (((u8vector? u8vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as u8vec"))
((name . "list->u8vector")
 (signature lambda ((list? proper-list)) u8vector?)
 (subsigs
   (proper-list (list u8?)))
 (tags pure)
 (desc . "Returns u8vector with same elements as list."))
((name . "u8?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an u8vector (ie., unsigned exact integer in the range 0 to (2^8)-1), and #f otherwise."))
((name . "make-s8vector")
 (signature
   case-lambda
   (((integer? size)) s8vector?)
   (((integer? size) (s8? fill)) s8vector?))
 (tags pure)
 (desc . "Returns a s8vector whose length is size. If fill is provided, all the elements of the s8vector are initialized to it."))
((name . "s8vector") 
 (signature lambda ((s8? value) ...) s8vector?)
 (tags pure)
 (desc . "Returns a s8vector initialized with values."))
((name . "s8vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a s8vector, and #f otherwise."))
((name . "s8vector-length")
 (signature lambda ((s8vector? s8vec)) integer?)
 (tags pure)
 (desc . "Returns the length of s8vec"))
((name . "s8vector-ref")
 (signature lambda ((s8vector? s8vec) (integer? i)) s8?)
 (tags pure)
 (desc . "Returns the ith element of s8vec."))
((name . "s8vector-set!")
 (signature lambda ((s8vector? s8vec) (integer? i) (s8? value)) undefined)
 (desc . "Sets the ith element of s8vec to value."))
((name . "s8vector->list")
 (signature
   case-lambda
   (((s8vector? s8vec)) list?)
   (((s8vector? s8vec) (integer? start)) list?)
   (((s8vector? s8vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as s8vec"))
((name . "list->s8vector")
 (signature lambda ((list? proper-list)) s8vector?)
 (subsigs
   (proper-list (list s8?)))
 (tags pure)
 (desc . "Returns s8vector with same elements as list."))
((name . "s8?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an s8vector (ie., signed exact integer in the range -(2^7) to (2^7)-1), and #f otherwise."))
((name . "make-u16vector")
 (signature
   case-lambda
   (((integer? size)) u16vector?)
   (((integer? size) (u16? fill)) u16vector?))
 (tags pure)
 (desc . "Returns a u16vector whose length is size. If fill is provided, all the elements of the u16vector are initialized to it."))
((name . "u16vector") 
 (signature lambda ((u16? value) ...) u16vector?)
 (tags pure)
 (desc . "Returns a u16vector initialized with values."))
((name . "u16vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a u16vector, and #f otherwise."))
((name . "u16vector-length")
 (signature lambda ((u16vector? u16vec)) integer?)
 (tags pure)
 (desc . "Returns the length of u16vec"))
((name . "u16vector-ref")
 (signature lambda ((u16vector? u16vec) (integer? i)) u16?)
 (tags pure)
 (desc . "Returns the ith element of u16vec."))
((name . "u16vector-set!")
 (signature lambda ((u16vector? u16vec) (integer? i) (u16? value)) undefined)
 (desc . "Sets the ith element of u16vec to value."))
((name . "u16vector->list")
 (signature
   case-lambda
   (((u16vector? u16vec)) list?)
   (((u16vector? u16vec) (integer? start)) list?)
   (((u16vector? u16vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as u16vec"))
((name . "list->u16vector")
 (signature lambda ((list? proper-list)) u16vector?)
 (subsigs
   (proper-list (list u16?)))
 (tags pure)
 (desc . "Returns u16vector with same elements as list."))
((name . "u16?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an u16vector (ie., unsigned exact integer in the range 0 to (2^16)-1), and #f otherwise."))
((name . "make-s16vector")
 (signature
   case-lambda
   (((integer? size)) s16vector?)
   (((integer? size) (s16? fill)) s16vector?))
 (tags pure)
 (desc . "Returns a s16vector whose length is size. If fill is provided, all the elements of the s16vector are initialized to it."))
((name . "s16vector") 
 (signature lambda ((s16? value) ...) s16vector?)
 (tags pure)
 (desc . "Returns a s16vector initialized with values."))
((name . "s16vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a s16vector, and #f otherwise."))
((name . "s16vector-length")
 (signature lambda ((s16vector? s16vec)) integer?)
 (tags pure)
 (desc . "Returns the length of s16vec"))
((name . "s16vector-ref")
 (signature lambda ((s16vector? s16vec) (integer? i)) s16?)
 (tags pure)
 (desc . "Returns the ith element of s16vec."))
((name . "s16vector-set!")
 (signature lambda ((s16vector? s16vec) (integer? i) (s16? value)) undefined)
 (desc . "Sets the ith element of s16vec to value."))
((name . "s16vector->list")
 (signature
   case-lambda
   (((s16vector? s16vec)) list?)
   (((s16vector? s16vec) (integer? start)) list?)
   (((s16vector? s16vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as s16vec"))
((name . "list->s16vector")
 (signature lambda ((list? proper-list)) s16vector?)
 (subsigs
   (proper-list (list s16?)))
 (tags pure)
 (desc . "Returns s16vector with same elements as list."))
((name . "s16?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an s16vector (ie., signed exact integer in the range -(2^15) to (2^15)-1), and #f otherwise."))
((name . "make-u32vector")
 (signature
   case-lambda
   (((integer? size)) u32vector?)
   (((integer? size) (u32? fill)) u32vector?))
 (tags pure)
 (desc . "Returns a u32vector whose length is size. If fill is provided, all the elements of the u32vector are initialized to it."))
((name . "u32vector") 
 (signature lambda ((u32? value) ...) u32vector?)
 (tags pure)
 (desc . "Returns a u32vector initialized with values."))
((name . "u32vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a u32vector, and #f otherwise."))
((name . "u32vector-length")
 (signature lambda ((u32vector? u32vec)) integer?)
 (tags pure)
 (desc . "Returns the length of u32vec"))
((name . "u32vector-ref")
 (signature lambda ((u32vector? u32vec) (integer? i)) u32?)
 (tags pure)
 (desc . "Returns the ith element of u32vec."))
((name . "u32vector-set!")
 (signature lambda ((u32vector? u32vec) (integer? i) (u32? value)) undefined)
 (desc . "Sets the ith element of u32vec to value."))
((name . "u32vector->list")
 (signature
   case-lambda
   (((u32vector? u32vec)) list?)
   (((u32vector? u32vec) (integer? start)) list?)
   (((u32vector? u32vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as u32vec"))
((name . "list->u32vector")
 (signature lambda ((list? proper-list)) u32vector?)
 (subsigs
   (proper-list (list u32?)))
 (tags pure)
 (desc . "Returns u32vector with same elements as list."))
((name . "u32?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an u32vector (ie., unsigned exact integer in the range 0 to (2^32)-1), and #f otherwise."))
((name . "make-s32vector")
 (signature
   case-lambda
   (((integer? size)) s32vector?)
   (((integer? size) (s32? fill)) s32vector?))
 (tags pure)
 (desc . "Returns a s32vector whose length is size. If fill is provided, all the elements of the s32vector are initialized to it."))
((name . "s32vector") 
 (signature lambda ((s32? value) ...) s32vector?)
 (tags pure)
 (desc . "Returns a s32vector initialized with values."))
((name . "s32vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a s32vector, and #f otherwise."))
((name . "s32vector-length")
 (signature lambda ((s32vector? s32vec)) integer?)
 (tags pure)
 (desc . "Returns the length of s32vec"))
((name . "s32vector-ref")
 (signature lambda ((s32vector? s32vec) (integer? i)) s32?)
 (tags pure)
 (desc . "Returns the ith element of s32vec."))
((name . "s32vector-set!")
 (signature lambda ((s32vector? s32vec) (integer? i) (s32? value)) undefined)
 (desc . "Sets the ith element of s32vec to value."))
((name . "s32vector->list")
 (signature
   case-lambda
   (((s32vector? s32vec)) list?)
   (((s32vector? s32vec) (integer? start)) list?)
   (((s32vector? s32vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as s32vec"))
((name . "list->s32vector")
 (signature lambda ((list? proper-list)) s32vector?)
 (subsigs
   (proper-list (list s32?)))
 (tags pure)
 (desc . "Returns s32vector with same elements as list."))
((name . "s32?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an s32vector (ie., signed exact integer in the range -(2^31) to (2^31)-1), and #f otherwise."))
((name . "make-u64vector")
 (signature
   case-lambda
   (((integer? size)) u64vector?)
   (((integer? size) (u64? fill)) u64vector?))
 (tags pure)
 (desc . "Returns a u64vector whose length is size. If fill is provided, all the elements of the u64vector are initialized to it."))
((name . "u64vector") 
 (signature lambda ((u64? value) ...) u64vector?)
 (tags pure)
 (desc . "Returns a u64vector initialized with values."))
((name . "u64vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a u64vector, and #f otherwise."))
((name . "u64vector-length")
 (signature lambda ((u64vector? u64vec)) integer?)
 (tags pure)
 (desc . "Returns the length of u64vec"))
((name . "u64vector-ref")
 (signature lambda ((u64vector? u64vec) (integer? i)) u64?)
 (tags pure)
 (desc . "Returns the ith element of u64vec."))
((name . "u64vector-set!")
 (signature lambda ((u64vector? u64vec) (integer? i) (u64? value)) undefined)
 (desc . "Sets the ith element of u64vec to value."))
((name . "u64vector->list")
 (signature
   case-lambda
   (((u64vector? u64vec)) list?)
   (((u64vector? u64vec) (integer? start)) list?)
   (((u64vector? u64vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as u64vec"))
((name . "list->u64vector")
 (signature lambda ((list? proper-list)) u64vector?)
 (subsigs
   (proper-list (list u64?)))
 (tags pure)
 (desc . "Returns u64vector with same elements as list."))
((name . "u64?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an u64vector (ie., unsigned exact integer in the range 0 to (2^64)-1), and #f otherwise."))
((name . "make-s64vector")
 (signature
   case-lambda
   (((integer? size)) s64vector?)
   (((integer? size) (s64? fill)) s64vector?))
 (tags pure)
 (desc . "Returns a s64vector whose length is size. If fill is provided, all the elements of the s64vector are initialized to it."))
((name . "s64vector") 
 (signature lambda ((s64? value) ...) s64vector?)
 (tags pure)
 (desc . "Returns a s64vector initialized with values."))
((name . "s64vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a s64vector, and #f otherwise."))
((name . "s64vector-length")
 (signature lambda ((s64vector? s64vec)) integer?)
 (tags pure)
 (desc . "Returns the length of s64vec"))
((name . "s64vector-ref")
 (signature lambda ((s64vector? s64vec) (integer? i)) s64?)
 (tags pure)
 (desc . "Returns the ith element of s64vec."))
((name . "s64vector-set!")
 (signature lambda ((s64vector? s64vec) (integer? i) (s64? value)) undefined)
 (desc . "Sets the ith element of s64vec to value."))
((name . "s64vector->list")
 (signature
   case-lambda
   (((s64vector? s64vec)) list?)
   (((s64vector? s64vec) (integer? start)) list?)
   (((s64vector? s64vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as s64vec"))
((name . "list->s64vector")
 (signature lambda ((list? proper-list)) s64vector?)
 (subsigs
   (proper-list (list s64?)))
 (tags pure)
 (desc . "Returns s64vector with same elements as list."))
((name . "s64?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an s64vector (ie., signed exact integer in the range -(2^63) to (2^63)-1), and #f otherwise."))
((name . "make-f32vector")
 (signature
   case-lambda
   (((integer? size)) f32vector?)
   (((integer? size) (f32? fill)) f32vector?))
 (tags pure)
 (desc . "Returns a f32vector whose length is size. If fill is provided, all the elements of the f32vector are initialized to it."))
((name . "f32vector") 
 (signature lambda ((f32? value) ...) f32vector?)
 (tags pure)
 (desc . "Returns a f32vector initialized with values."))
((name . "f32vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a f32vector, and #f otherwise."))
((name . "f32vector-length")
 (signature lambda ((f32vector? f32vec)) integer?)
 (tags pure)
 (desc . "Returns the length of f32vec"))
((name . "f32vector-ref")
 (signature lambda ((f32vector? f32vec) (integer? i)) f32?)
 (tags pure)
 (desc . "Returns the ith element of f32vec."))
((name . "f32vector-set!")
 (signature lambda ((f32vector? f32vec) (integer? i) (f32? value)) undefined)
 (desc . "Sets the ith element of f32vec to value."))
((name . "f32vector->list")
 (signature
   case-lambda
   (((f32vector? f32vec)) list?)
   (((f32vector? f32vec) (integer? start)) list?)
   (((f32vector? f32vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as f32vec"))
((name . "list->f32vector")
 (signature lambda ((list? proper-list)) f32vector?)
 (subsigs
   (proper-list (list f32?)))
 (tags pure)
 (desc . "Returns f32vector with same elements as list."))
((name . "f32?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an f32vector (ie., inexact real), and #f otherwise."))
((name . "make-f64vector")
 (signature
   case-lambda
   (((integer? size)) f64vector?)
   (((integer? size) (f64? fill)) f64vector?))
 (tags pure)
 (desc . "Returns a f64vector whose length is size. If fill is provided, all the elements of the f64vector are initialized to it."))
((name . "f64vector") 
 (signature lambda ((f64? value) ...) f64vector?)
 (tags pure)
 (desc . "Returns a f64vector initialized with values."))
((name . "f64vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a f64vector, and #f otherwise."))
((name . "f64vector-length")
 (signature lambda ((f64vector? f64vec)) integer?)
 (tags pure)
 (desc . "Returns the length of f64vec"))
((name . "f64vector-ref")
 (signature lambda ((f64vector? f64vec) (integer? i)) f64?)
 (tags pure)
 (desc . "Returns the ith element of f64vec."))
((name . "f64vector-set!")
 (signature lambda ((f64vector? f64vec) (integer? i) (f64? value)) undefined)
 (desc . "Sets the ith element of f64vec to value."))
((name . "f64vector->list")
 (signature
   case-lambda
   (((f64vector? f64vec)) list?)
   (((f64vector? f64vec) (integer? start)) list?)
   (((f64vector? f64vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as f64vec"))
((name . "list->f64vector")
 (signature lambda ((list? proper-list)) f64vector?)
 (subsigs
   (proper-list (list f64?)))
 (tags pure)
 (desc . "Returns f64vector with same elements as list."))
((name . "f64?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an f64vector (ie., inexact real), and #f otherwise."))
((name . "make-c64vector")
 (signature
   case-lambda
   (((integer? size)) c64vector?)
   (((integer? size) (c64? fill)) c64vector?))
 (tags pure)
 (desc . "Returns a c64vector whose length is size. If fill is provided, all the elements of the c64vector are initialized to it."))
((name . "c64vector") 
 (signature lambda ((c64? value) ...) c64vector?)
 (tags pure)
 (desc . "Returns a c64vector initialized with values."))
((name . "c64vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a c64vector, and #f otherwise."))
((name . "c64vector-length")
 (signature lambda ((c64vector? c64vec)) integer?)
 (tags pure)
 (desc . "Returns the length of c64vec"))
((name . "c64vector-ref")
 (signature lambda ((c64vector? c64vec) (integer? i)) c64?)
 (tags pure)
 (desc . "Returns the ith element of c64vec."))
((name . "c64vector-set!")
 (signature lambda ((c64vector? c64vec) (integer? i) (c64? value)) undefined)
 (desc . "Sets the ith element of c64vec to value."))
((name . "c64vector->list")
 (signature
   case-lambda
   (((c64vector? c64vec)) list?)
   (((c64vector? c64vec) (integer? start)) list?)
   (((c64vector? c64vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as c64vec"))
((name . "list->c64vector")
 (signature lambda ((list? proper-list)) c64vector?)
 (subsigs
   (proper-list (list c64?)))
 (tags pure)
 (desc . "Returns c64vector with same elements as list."))
((name . "c64?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an c64vector (ie., inexact complex), and #f otherwise."))
((name . "make-c128vector")
 (signature
   case-lambda
   (((integer? size)) c128vector?)
   (((integer? size) (c128? fill)) c128vector?))
 (tags pure)
 (desc . "Returns a c128vector whose length is size. If fill is provided, all the elements of the c128vector are initialized to it."))
((name . "c128vector") 
 (signature lambda ((c128? value) ...) c128vector?)
 (tags pure)
 (desc . "Returns a c128vector initialized with values."))
((name . "c128vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a c128vector, and #f otherwise."))
((name . "c128vector-length")
 (signature lambda ((c128vector? c128vec)) integer?)
 (tags pure)
 (desc . "Returns the length of c128vec"))
((name . "c128vector-ref")
 (signature lambda ((c128vector? c128vec) (integer? i)) c128?)
 (tags pure)
 (desc . "Returns the ith element of c128vec."))
((name . "c128vector-set!")
 (signature lambda ((c128vector? c128vec) (integer? i) (c128? value)) undefined)
 (desc . "Sets the ith element of c128vec to value."))
((name . "c128vector->list")
 (signature
   case-lambda
   (((c128vector? c128vec)) list?)
   (((c128vector? c128vec) (integer? start)) list?)
   (((c128vector? c128vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as c128vec"))
((name . "list->c128vector")
 (signature lambda ((list? proper-list)) c128vector?)
 (subsigs
   (proper-list (list c128?)))
 (tags pure)
 (desc . "Returns c128vector with same elements as list."))
((name . "c128?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an c128vector (ie., inexact complex), and #f otherwise."))
)
