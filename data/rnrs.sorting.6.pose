(((name . "list-sort")
  (signature lambda ((procedure? <) (list? lis)) list?)
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure)
  (desc . "Proc should accept any two elements of list, and should not have any side effects. Proc should return a true value when its first argument is strictly less than its second, and #f otherwise.
The list-sort procedure performs a stable sort of list in ascending order according to proc, without changing list in any way. The results may be eq? to the argument when the argument is already sorted, and the result of list-sort may share structure with a tail of the original list. The sorting algorithm performs O(n lg n) calls to proc where n is the length of list, and all arguments passed to proc are elements of the list being sorted, but the pairing of arguments and the sequencing of calls to proc are not specified. If multiple returns occur from list-sort, the return values returned by earlier returns are not mutated."))
 ((name . "vector-sort")
  (signature lambda ((procedure? <) (vector? v)) boolean?)
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure)
  (desc . "Proc should accept any two elements of vector, and should not have any side effects. Proc should return a true value when its first argument is strictly less than its second, and #f otherwise.
The vector-sort procedure performs a stable sort of vector in ascending order according to proc, without changing vector in any way. The results may be eq? to the argument when the argument is already sorted, and the result of list-sort may share structure with a tail of the original list. The sorting algorithm performs O(n lg n) calls to proc where n is the length of list or vector, and all arguments passed to proc are elements of the list or vector being sorted, but the pairing of arguments and the sequencing of calls to proc are not specified. If multiple returns occur from vector-sort, the return values returned by earlier returns are not mutated."))
 ((name . "vector-sort!")
  (signature lambda ((procedure? <) (vector? v)) boolean?)
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (desc . "Proc should accept any two elements of the vector, and should not have any side effects. Proc should return a true value when its first argument is strictly less than its second, and #f otherwise. The vector-sort! procedure destructively sorts vector in ascending order according to proc. The sorting algorithm performs O(n2) calls to proc where n is the length of vector, and all arguments passed to proc are elements of the vector being sorted, but the pairing of arguments and the sequencing of calls to proc are not specified. The sorting algorithm may be unstable. The procedure returns unspecified values.")))
