(((name . "u64vector?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (desc . "Returns #t if the if an object is homogenous u64vector, #f otherwise."))
 ((name . "make-u64vector")
  (signature
   case-lambda
   (((integer? size)) u64vector?)
   (((integer? size) (integer? fill)) u64vector?))
  (tags pure)
  (desc . "Create homogenous u64 vector. If fill is given, it must be unsigned exact integer in the range 0 to (2^64)-1. If fill isn't given, vector is filled with unspecified values which are guaranteed to fit into the range of the u64vector."))
 ((name . "u64vector")
  (signature lambda ((integer? value) ...) u64vector?)
  (tags pure)
  (desc . "Create homogenous u64 vector. Each value must be unsigned exact integer in the range 0 to (2^64)-1."))
 ((name . "u64vector-length")
  (signature lambda ((u64vector? vec)) integer?)
  (tags pure)
  (desc . "Returns the number of elements in u64vector as an exact integer."))
 ((name . "u64vector-ref")
  (signature lambda ((u64vector? vec) (integer? i)) integer?)
  (tags pure)
  (desc . "Returns i-th element in the vector. i must be in range [0, (u64vector-length vec))"))
 ((name . "u64vector-set!")
  (signature lambda ((u64vector? vec) (integer? i) (integer? value)) undefined)
  (desc . "u64vector-set! stores value in element k of vector. Value must be unsigned exact integer in the range 0 to (2^64)-1. i must be in range [0, (u64vector-length vec))"))
 ((name . "u64vector->list")
  (signature lambda ((u64vector? vec)) list?)
  (tags pure)
  (desc . "Converts a homogenous vector to a list."))
 ((name . "list->u64vector")
  (signature lambda ((list? proper-list)) u64vector?)
  (subsigs
    (proper-list (list integer?)))
  (tags pure)
  (desc . "Converts a list to a homogenous u64vector. Each element in input list must be unsigned exact integer in the range 0 to (2^64)-1.")))
