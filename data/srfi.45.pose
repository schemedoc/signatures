(((name . "delay")
  (signature syntax-rules () ((_ expression) promise?))
  (desc . "Takes an expression of arbitrary type a and returns a promise of type (Promise a) which at some point in the future may be asked (by the force procedure) to evaluate the expression and deliver the resulting value."))
 ((name . "lazy")
  (signature syntax-rules () ((_ expression) promise?))
  (subsigs (expression (value promise?)))
  (desc . "Takes an expression of type (Promise a) and returns a promise of type (Promise a) which at some point in the future may be asked (by the force procedure) to evaluate the expression and deliver the resulting promise."))
 ((name . "force") 
  (signature lambda ((promise? expression)) *)
  (desc . "Takes an argument of type (Promise a) and returns a value of type a as follows: If a value of type a has been computed for the promise, this value is returned. Otherwise, the promise is first evaluated, then overwritten by the obtained promise or value, and then force is again applied (iteratively) to the promise."))
 ((name . "eager") 
  (signature lambda (expression) promise?)
  (desc . "Takes an argument of type a and returns a value of type Promise a. As opposed to delay, the argument is evaluated eagerly.")))
