((name . "make-@vector")
 (signature
   case-lambda
   (((integer? size)) @vector?)
   (((integer? size) (@? fill)) @vector?))
 (tags pure)
 (desc . "Returns a @vector whose length is size. If fill is provided, all the elements of the @vector are initialized to it."))
((name . "@vector") 
 (signature lambda ((@? value) ...) @vector?)
 (tags pure)
 (desc . "Returns a @vector initialized with values."))
((name . "@vector?") 
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a @vector, and #f otherwise."))
((name . "@vector-length")
 (signature lambda ((@vector? @vec)) integer?)
 (tags pure)
 (desc . "Returns the length of @vec"))
((name . "@vector-ref")
 (signature lambda ((@vector? @vec) (integer? i)) @?)
 (tags pure)
 (desc . "Returns the ith element of @vec."))
((name . "@vector-set!")
 (signature lambda ((@vector? @vec) (integer? i) (@? value)) undefined)
 (desc . "Sets the ith element of @vec to value."))
((name . "@vector->list")
 (signature
   case-lambda
   (((@vector? @vec)) list?)
   (((@vector? @vec) (integer? start)) list?)
   (((@vector? @vec) (integer? start) (integer? end)) list?))
 (tags pure)
 (desc . "Returns a list with same elements as @vec"))
((name . "list->@vector")
 (signature lambda ((list? proper-list)) @vector?)
 (subsigs
   (proper-list (list @?)))
 (tags pure)
 (desc . "Returns @vector with same elements as list."))
((name . "@?")
 (signature lambda (obj) boolean?)
 (tags pure predicate)
 (desc . "Returns #t if obj is a valid element of an @vector (ie., @-DESC), and #f otherwise."))
