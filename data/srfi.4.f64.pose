(((name . "f64vector?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (desc . "Returns #t if the if an object is homogenous f64vector, #f otherwise."))
 ((name . "make-f64vector")
  (signature
   case-lambda
   (((integer? size)) f64vector?)
   (((integer? size) (real? fill)) f64vector?))
  (tags pure)
  (desc . "Create homogenous f64 vector. If fill is given, it must be inexact real. If fill isn't given, vector is filled with unspecified values which are guaranteed to fit into the range of the f64vector."))
 ((name . "f64vector")
  (signature lambda ((real? value) ...) f64vector?)
  (tags pure)
  (desc . "Create homogenous f64 vector. Each value must be inexact real."))
 ((name . "f64vector-length")
  (signature lambda ((f64vector? vec)) integer?)
  (tags pure)
  (desc . "Returns the number of elements in f64vector as an exact integer."))
 ((name . "f64vector-ref")
  (signature lambda ((f64vector? vec) (integer? i)) real?)
  (tags pure)
  (desc . "Returns i-th element in the vector. i must be in range [0, (f64vector-length vec))"))
 ((name . "f64vector-set!")
  (signature lambda ((f64vector? vec) (integer? i) (real? value)) undefined)
  (desc . "f64vector-set! stores value in element k of vector. Value must be inexact real. i must be in range [0, (f64vector-length vec))"))
 ((name . "f64vector->list")
  (signature lambda ((f64vector? vec)) list?)
  (tags pure)
  (desc . "Converts a homogenous vector to a list."))
 ((name . "list->f64vector")
  (signature lambda ((list? proper-list)) f64vector?)
  (subsigs
    (proper-list (list real?)))
  (tags pure)
  (desc . "Converts a list to a homogenous f64vector. Each element in input list must be inexact real.")))
