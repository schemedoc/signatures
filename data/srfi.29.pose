(((name . "current-language")
  (signature case-lambda (() symbol?) (((symbol? lang)) undefined))
  (desc . "When given no arguments, returns the current ISO 639-1 language code as a symbol.  If provided with an argument, the current language is set to that named by the symbol for the currently executing Scheme thread (or for the entire Scheme system if such a distinction is not possible)."))
 ((name . "current-country")
  (signature case-lambda (() symbol?) (((symbol? country)) undefined))
  (desc . "returns the current ISO 3166-1 country code as a symbol.  If provided with an argument, the current country is set to that named by the symbol for the currently executing Scheme thread (or for the entire Scheme system if such a distinction is not possible)."))
 ((name . "current-locale-details")
  (signature case-lambda (() list?) (((list? symbols)) undefined))
  (desc . "Returns a list of additional locale details as a list of symbols.  This list may contain information about encodings or other more specific information.  If provided with an argument, the current locale details are set to those given in the currently executing Scheme thread (or for the entire Scheme system if such a distinction is not possible)."))
 ((name . "declare-bundle!")
  (signature lambda ((list? bundle-specifier) (list? alist)) undefined)
  (desc . "Declares a new bundle named by the given bundle-specifier.  The contents of the bundle are defined by the provided association list.  The list contains associations between Scheme symbols and the message templates (Scheme strings) they name.  If a bundle already exists with the given name, it is overwritten with the newly declared bundle."))
 ((name . "store-bundle")
  (signature lambda ((list? bundle-specifier)) boolean?)
  (desc . "Attempts to store a bundle named by the given bundle specifier, and previously made available using declare-bundle! or load-bundle!, in an unspecified mechanism that may be persistent across Scheme system restarts.  If successful, a non-false value is returned.  If unsuccessful, #f is returned."))
 ((name . "load-bundle!")
  (signature lambda ((list? bundle-specifier)) boolean?)
  (desc . "Attempts to retrieve a bundle from an unspecified mechanism which stores bundles outside the Scheme system.  If the bundle was retrieved successfully, the function returns a non-false value, and the bundle is immediately available to the Scheme system. If the bundle could not be found or loaded successfully, the function returns #f, and the Scheme system's bundle registry remains unaffected."))
 ((name . "localized-template")
  (signature
   lambda
   ((symbol? package-name) (symbol? message-tpl-name))
   (or string? #f))
  (desc . "Retrieves a localized message template for the given package name and the given message template name (both symbols).  If no such message could be found, false (#f) is returned.")))
