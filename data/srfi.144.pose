(((name . "fl-e") (signature value flonum?) (desc . "Bound to the mathematical constant e. (C99 M_E) "))
 ((name . "fl-1/e") (signature value flonum?) (desc . "Bound to 1/e. (C99 M_E) "))
 ((name . "fl-e-2") (signature value flonum?) (desc . "Bound to e^2."))
 ((name . "fl-e-pi/4") (signature value flonum?) (desc . "Bound to e^(pi/4)."))
 ((name . "fl-log2-e") (signature value flonum?) (desc . "Bound to log2 e. (C99 M_LOG2E)"))
 ((name . "fl-log10-e") (signature value flonum?) (desc . "Bound to log10 e. (C99 M_LOG10E)"))
 ((name . "fl-log-2") (signature value flonum?) (desc . "Bound to loge 2. (C99 M_LN2)"))
 ((name . "fl-1/log-2") (signature value flonum?) (desc . "Bound to 1/(loge 2)"))
 ((name . "fl-log-3") (signature value flonum?) (desc . "Bound to loge 3."))
 ((name . "fl-log-pi") (signature value flonum?) (desc . "Bound to loge pi."))
 ((name . "fl-log-10") (signature value flonum?) (desc . "Bound to loge 10. (C99 M_LN10) "))
 ((name . "fl-1/log-10") (signature value flonum?) (desc . "Bound to 1/(loge 10). (C99 M_LN10)"))
 ((name . "fl-pi") (signature value flonum?) (desc . "Bound to the mathematical constant pi. (C99 M_PI)"))
 ((name . "fl-1/pi") (signature value flonum?) (desc . "Bound to 1/pi. (C99 M_1_PI)"))
 ((name . "fl-2pi") (signature value flonum?) (desc . "Bound to 2pi."))
 ((name . "fl-pi/2") (signature value flonum?) (desc . "Bound to pi/2. (C99 M_PI_2)"))
 ((name . "fl-pi/4") (signature value flonum?) (desc . "Bound to pi/4. (C99 M_PI_4)"))
 ((name . "fl-pi-squared") (signature value flonum?) (desc . "Bound to pi^2."))
 ((name . "fl-degree") (signature value flonum?) (desc . "Bound to pi/180, the number of radians in a degree."))
 ((name . "fl-2/pi") (signature value flonum?) (desc . "Bound to 2/pi. (C99 M_2_PI)"))
 ((name . "fl-2/sqrt-pi") (signature value flonum?) (desc . "Bound to 2/(pi^0.5). (C99 M_2_SQRTPI)"))
 ((name . "fl-sqrt-2") (signature value flonum?) (desc . "Bound to 2^0.5. (C99 M_SQRT2) "))
 ((name . "fl-sqrt-3") (signature value flonum?) (desc . "Bound to 3^0.5."))
 ((name . "fl-sqrt-5") (signature value flonum?) (desc . "Bound to 5^0.5."))
 ((name . "fl-sqrt-10") (signature value flonum?) (desc . "Bound to 10^0.5."))
 ((name . "fl-1/sqrt-2") (signature value flonum?) (desc . "Bound to 1/(2^0.5). (C99 M_SQRT1_2) "))
 ((name . "fl-cbrt-2") (signature value flonum?) (desc . "Bound to 2^(1/3)."))
 ((name . "fl-cbrt-3") (signature value flonum?) (desc . "Bound to 3^(1/3)."))
 ((name . "fl-4thrt-2") (signature value flonum?) (desc . "Bound to 2^(1/4)."))
 ((name . "fl-phi") (signature value flonum?) (desc . "Bound to the mathematical constant φ."))
 ((name . "fl-log-phi") (signature value flonum?) (desc . "Bound to log(φ)."))
 ((name . "fl-1/log-phi") (signature value flonum?) (desc . "Bound to 1/log(φ)."))
 ((name . "fl-euler") (signature value flonum?) (desc . "Bound to the mathematical constant γ (Euler's constant)."))
 ((name . "fl-e-euler") (signature value flonum?) (desc . "Bound to e^γ."))
 ((name . "fl-sin-1") (signature value flonum?) (desc . "Bound to sin 1."))
 ((name . "fl-cos-1") (signature value flonum?) (desc . "Bound to cos 1."))
 ((name . "fl-gamma-1/2") (signature value flonum?) (desc . "Bound to Γ(1/2)."))
 ((name . "fl-gamma-1/3") (signature value flonum?) (desc . "Bound to Γ(1/3)."))
 ((name . "fl-gamma-2/3") (signature value flonum?) (desc . "Bound to Γ(2/3)."))
 ((name . "fl-greatest") (signature value flonum?) (desc . "Bound to the largest positive finite flonum. (C99 DBL_MAX)"))
 ((name . "fl-least") (signature value flonum?) (desc . "Bound to the smallest positive finite flonum. (C99 DBL_TRUE_MIN)"))
 ((name . "fl-epsilon") (signature value flonum?) (desc . "Bound to the appropriate machine epsilon for the hardware representation of flonums. (C99 DBL_EPSILON in <float.h>)"))
 ((name . "fl-fast-fl+*") 
  (signature value boolean?)
  (desc . "Bound to #t if (fl+* x y z) executes about as fast as, or faster than, (fl+ (fl* x y) z); bound to #f otherwise. (C99 FP_FAST_FMA)
So that the value of this variable can be determined at compile time, R7RS implementations and other implementations that provide a features function should provide the feature fl-fast-fl+* if this variable is true, and not if it is false or the value is unknown at compile time."))
 ((name . "fl-integer-exponent-zero")
  (signature value integer?)
  (desc . "Bound to whatever exact integer is returned by (flinteger-exponent 0.0). (C99 FP_ILOGB0)"))
 ((name . "fl-integer-exponent-nan") 
  (signature value integer?)
  (desc . "Bound to whatever exact integer is returned by (flinteger-exponent +nan.0). (C99 FP_ILOGBNAN)"))
 ((name . "flonum")
  (signature lambda ((real? number)) flonum?)
  (tags pure)
  (desc . "If number is an inexact real number and there exists a flonum that is the same (in the sense of =) to number, returns that flonum. If number is a negative zero, an infinity, or a NaN, return its flonum equivalent. If such a flonum does not exist, returns the nearest flonum, where \"nearest\" is implementation-dependent. If number is not a real number, it is an error. If number is exact, applies inexact or exact->inexact to number first."))
 ((name . "fladjacent")
  (signature lambda ((flonum? x) (flonum? y)) flonum?)
  (tags pure)
  (desc . "Returns a flonum adjacent to x in the direction of y. Specifically: if x < y, returns the smallest flonum larger than x; if x > y, returns the largest flonum smaller than x; if x = y, returns x. (C99 nextafter) "))
 ((name . "flcopysign")
  (signature lambda ((flonum? x) (flonum? y)) flonum?)
  (tags pure)
  (desc . "Returns a flonum whose magnitude is the magnitude of x and whose sign is the sign of y. (C99 copysign)"))
 ((name . "make-flonum")
  (signature lambda ((flonum? x) (integer? n)) flonum?)
  (tags pure)
  (desc . "Returns x * 2^n, where n is an integer with an implementation-dependent range. (C99 ldexp) "))
 ((name . "flinteger-fraction")
  (signature lambda ((flonum? x)) (values flonum? flonum?))
  (tags pure)
  (desc . "Returns two values, the integral part of x as a flonum and the fractional part of x as a flonum. (C99 modf)"))
 ((name . "flexponent") 
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns the exponent of x. (C99 logb)"))
 ((name . "flinteger-exponent")
  (signature lambda ((flonum? x)) integer?)
  (tags pure)
  (desc . "Returns the same as flexponent truncated to an exact integer. If x is zero, returns fl-integer-exponent-zero; if x is a NaN, returns fl-integer-exponent-nan; if x is infinite, returns a large implementation-dependent exact integer. (C99 ilogb)"))
 ((name . "flnormalized-fraction-exponent")
  (signature lambda ((flonum? x)) (values flonum? integer?))
  (tags pure)
  (desc . "Returns two values, a correctly signed fraction y whose absolute value is between 0.5 (inclusive) and 1.0 (exclusive), and an exact integer exponent n such that x = y(2^n). (C99 frexp)"))
 ((name . "flsign-bit") 
  (signature lambda ((flonum? x)) integer?)
  (tags pure)
  (desc . "Returns 0 for positive flonums and 1 for negative flonums and -0.0. The value of (flsign-bit +nan.0) is implementation-dependent, reflecting the sign bit of the underlying representation of NaNs. (C99 signbit)"))
 ((name . "flonum?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (desc . "Returns #t if obj is a flonum and #f otherwise."))
 ((group
    ((name . "fl=?")
     (signature lambda ((flonum? x) (flonum? y) (flonum? z) ...) boolean?)
     (tags pure))
    ((name . "fl<?")
     (signature lambda ((flonum? x) (flonum? y) (flonum? z) ...) boolean?)
     (tags pure))
    ((name . "fl>?")
     (signature lambda ((flonum? x) (flonum? y) (flonum? z) ...) boolean?)
     (tags pure))
    ((name . "fl<=?")
     (signature lambda ((flonum? x) (flonum? y) (flonum? z) ...) boolean?)
     (tags pure))
    ((name . "fl>=?")
     (signature lambda ((flonum? x) (flonum? y) (flonum? z) ...) boolean?)
     (tags pure)))
  (desc . "These procedures return #t if their arguments are (respectively): equal, monotonically increasing, monotonically decreasing, monotonically nondecreasing, or monotonically nonincreasing; they return #f otherwise. These predicates must be transitive. (C99 =, <, > <=, >= operators respectively)"))
 ((name . "flunordered?")
  (signature lambda ((flonum? x) (flonum? y)) boolean?)
  (tags pure)
  (desc . "Returns #t if x and y are unordered according to IEEE rules. This means that one of them is a NaN."))
 ((name . "flinteger?")
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether x is an integral flonum."))
 ((name . "flzero?") 
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether x is zero. Beware of roundoff errors."))
 ((name . "flpositive?") 
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether x is positive."))
 ((name . "flnegative?") 
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether x is negative. Note that (flnegative? -0.0) must return #f; otherwise it would lose the correspondence with (fl<? -0.0 0.0), which is #f according to IEEE 754."))
 ((name . "flodd?") 
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether the flonum x is odd. It is an error if x is not an integer."))
 ((name . "fleven?") 
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether the flonum x is even. It is an error if x is not an integer."))
 ((name . "flfinite?") 
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether the flonum x is finite. (C99 isfinite)"))
 ((name . "flinfinite?") 
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether the flonum x is infinite. (C99 isinf)"))
 ((name . "flnan?") 
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether the flonum x is NaN. (C99 isnan)"))
 ((name . "flnormalized?")
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether the flonum x is normalized. (C11 isnormal; in C99, use fpclassify(x) == FP_NORMAL)"))
 ((name . "fldenormalized?")
  (signature lambda ((flonum? x)) boolean?)
  (tags pure)
  (desc . "Tests whether the flonum x is denormalized. (C11 issubnormal; in C99, use fpclassify(x) == FP_SUBNORMAL)"))
 ((group
    ((name . "flmax") (signature lambda ((flonum? x) ...) flonum?) (tags pure))
    ((name . "flmin") (signature lambda ((flonum? x) ...) flonum?) (tags pure)))
  (desc . "Return the maximum/minimum argument. If there are no arguments, these procedures return -inf.0 or +inf.0 if the implementation provides these numbers, and (fl- fl-greatest) or fl-greatest otherwise. (C99 fmax fmin)"))
 ((group
    ((name . "fl+") (signature lambda ((flonum? x) ...) flonum?) (tags pure))
    ((name . "fl*") (signature lambda ((flonum? x) ...) flonum?) (tags pure)))
  (desc . "Return the flonum sum or product of their flonum arguments. (C99 + * operators respectively)"))
 ((name . "fl+*")
  (signature lambda ((flonum? x) (flonum? y) (flonum? z)) flonum?)
  (tags pure)
  (desc . "Returns xy + z as if to infinite precision and rounded only once. The boolean constant fl-fast-fl+* indicates whether this procedure executes about as fast as, or faster than, a multiply and an add of flonums. (C99 fma)"))
 ((group
    ((name . "fl-")
     (signature lambda ((flonum? x) (flonum? y) ...) flonum?)
     (tags pure))
    ((name . "fl/")
     (signature lambda ((flonum? x) (flonum? y) ...) flonum?)
     (tags pure)))
  (desc . "With two or more arguments, these procedures return the difference or quotient of their arguments, associating to the left. With one argument, however, they return the additive or multiplicative inverse of their argument. (C99 - / operators respectively)"))
 ((name . "flabs") 
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns the absolute value of x. (C99 fabs) "))
 ((name . "flabsdiff")
  (signature lambda ((flonum? x) (flonum? y)) flonum?)
  (tags pure)
  (desc . "Returns |x - y|."))
 ((name . "flposdiff")
  (signature lambda ((flonum? x) (flonum? y)) flonum?)
  (tags pure)
  (desc . "Returns the difference of x and y if it is non-negative, or zero if the difference is negative. (C99 fdim) "))
 ((name . "flsgn") 
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns (flcopysign 1.0 x). "))
 ((group
    ((name . "flnumerator") (signature lambda ((flonum? x)) flonum?) (tags pure))
    ((name . "fldenominator")
     (signature lambda ((flonum? x)) flonum?)
     (tags pure)))
  (desc . "Returns the numerator/denominator of x as a flonum; the result is computed as if x was represented as a fraction in lowest terms. The denominator is always positive. The numerator of an infinite flonum is itself. The denominator of an infinite or zero flonum is 1.0. The numerator and denominator of a NaN is a NaN."))
 ((name . "flfloor") 
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns the largest integral flonum not larger than x. (C99 floor)"))
 ((name . "flceiling") 
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns the smallest integral flonum not smaller than x. (C99 ceil)"))
 ((name . "flround")
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns the closest integral flonum to x, rounding to even when x represents a number halfway between two integers. (Not the same as C99 round, which rounds away from zero)"))
 ((name . "fltruncate") 
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns the closest integral flonum to x whose absolute value is not larger than the absolute value of x (C99 trunc)"))
 ((name . "flexp") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns e^x. (C99 exp) "))
 ((name . "flexp2") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns 2^x. (C99 exp2)"))
 ((name . "flexp-1") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns e^x - 1, but is much more accurate than flexp for very small values of x. It is recommended for use in algorithms where accuracy is important. (C99 expm1)"))
 ((name . "flsquare") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns x^2."))
 ((name . "flsqrt") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns x^0.5. For -0.0, flsqrt should return -0.0. (C99 sqrt)"))
 ((name . "flcbrt") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns x^(1/3). (C99 cbrt)"))
 ((name . "flhypot")
  (signature lambda ((flonum? x) (flonum? y)) flonum?)
  (tags pure)
  (desc . "Returns the length of the hypotenuse of a right triangle whose sides are of length |x| and |y|. (C99 hypot)"))
 ((name . "flexpt")
  (signature lambda ((flonum? x) (flonum? y)) flonum?)
  (tags pure)
  (desc . "Returns x^y. If x is zero, then the result is zero. (C99 pow)"))
 ((name . "fllog") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns loge x. (C99 log)"))
 ((name . "fllog1+") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns loge (x+ 1), but is much more accurate than fllog for values of x near 0. It is recommended for use in algorithms where accuracy is important. (C99 log1p)"))
 ((name . "fllog2") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns log2 x. (C99 log2)"))
 ((name . "fllog10") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns log10 x. (C99 log10)"))
 ((name . "make-fllog-base")
  (signature lambda ((flonum? base)) procedure?)
  (subsigs (return (lambda ((flonum? x)) flonum?)))
  (tags pure)
  (desc . "Returns a procedure that calculates the base-x logarithm of its argument. If x is 1.0 or less than 1.0, it is an error."))
 ((name . "flsin") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns sin x. (C99 sin)"))
 ((name . "flcos") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns cos x. (C99 cos)"))
 ((name . "fltan") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns tan x. (C99 tan)"))
 ((name . "flasin") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns arcsin x. (C99 asin)"))
 ((name . "flacos") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns arccos x. (C99 acos)"))
 ((name . "flatan")
  (signature
   case-lambda
   (((flonum? x)) flonum?)
   (((flonum? y) (flonum? x)) flonum?))
  (tags pure)
  (desc . "Returns arctan x. (C99 atan)
With two arguments, returns arctan(y/x). in the range [-π,π], using the signs of x and y to choose the correct quadrant for the result. (C99 atan2)"))
 ((name . "flsinh") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns sinh x. (C99 sinh)"))
 ((name . "flcosh") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns cosh x. (C99 cosh)"))
 ((name . "fltanh") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns tanh x. (C99 tanh)"))
 ((name . "flasinh") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns arcsinh x. (C99 asinh)"))
 ((name . "flacosh") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns arccosh x. (C99 acosh)"))
 ((name . "flatanh") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns arctanh x. (C99 atanh)"))
 ((name . "flquotient")
  (signature lambda ((flonum? x) (flonum? y)) flonum?)
  (tags pure)
  (desc . "Returns the quotient of x/y as an integral flonum, truncated towards zero."))
 ((name . "flremainder")
  (signature lambda ((flonum? x) (flonum? y)) flonum?)
  (tags pure)
  (desc . "Returns the truncating remainder of x/y as an integral flonum."))
 ((name . "flremquo")
  (signature lambda ((flonum? x) (flonum? y)) (values flonum? integer?))
  (tags pure)
  (desc . "Returns two values, the rounded remainder of x/y and the low-order n bits (as a correctly signed exact integer) of the rounded quotient. The value of n is implementation-dependent but at least 3. This procedure can be used to reduce the argument of the inverse trigonometric functions, while preserving the correct quadrant or octant. (C99 remquo)"))
 ((name . "flgamma") 
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns Γ(x), the gamma function applied to x. This is equal to (x-1)! for integers. (C99 tgamma)"))
 ((name . "flloggamma") 
  (signature lambda ((flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns two values, log |Γ(x)| without internal overflow, and the sign of Γ(x) as 1.0 if it is positive and -1.0 if it is negative. (C99 lgamma)"))
 ((name . "flfirst-bessel")
  (signature lambda ((integer? n) (flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns the nth order Bessel function of the first kind applied to x, Jn(x). (jn, which is an XSI Extension of C99) "))
 ((name . "flsecond-bessel")
  (signature lambda ((integer? n) (flonum? x)) flonum?)
  (tags pure)
  (desc . "Returns the nth order Bessel function of the second kind applied to x, Yn(x). (yn, which is an XSI Extension of C99)"))
 ((name . "flerf") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns the error function erf(x). (C99 erf)"))
 ((name . "flerfc") (signature lambda ((flonum? x)) flonum?) (tags pure) (desc . "Returns the complementary error function, 1 - erf(x). (C99 erfc)")))
