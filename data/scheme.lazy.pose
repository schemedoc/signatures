(((name . "delay")
  (signature syntax-rules () ((_ expression) promise?))
  (desc . "Semantics: The delay construct is used together with the procedure force to implement lazy evaluation or call by need. (delay 〈expression〉) returns an object called a promise which at some point in the future can be asked (by the force procedure) to evaluate 〈expression〉, and deliver the resulting value. The effect of 〈expression〉 returning multiple values is unspecified."))
 ((name . "delay-force")
  (signature syntax-rules () ((_ expression) promise?))
  (tags)
  (desc . "Semantics: The expression (delay-force expression) is conceptually similar to (delay (force expression)), with the difference that forcing the result of delay-force will in effect result in a tail call to (force expression), while forcing the result of (delay (force expression)) might not. Thus iterative lazy algorithms that might result in a long series of chains of delay and force can be rewritten using delay-force to prevent consuming unbounded space during evaluation."))
 ((name . "force")
  (signature lambda ((promise? promise)) *)
  (desc . "The force procedure forces the value of a promise created by delay, delay-force, or make-promise. If no value has been computed for the promise, then a value is computed and returned. The value of the promise must be cached (or “memoized”) so that if it is forced a second time, the previously computed value is returned. Consequently, a delayed expression is evaluated using the parameter values and exception handler of the call to force which first requested its value. If promise is not a promise, it may be returned unchanged."))
 ((name . "make-promise")
  (signature lambda (obj) promise?)
  (tags pure)
  (desc . "The make-promise procedure returns a promise which,when forced, will return obj . It is similar to delay, but does not delay its argument: it is a procedure rather than syntax. If obj is already a promise, it is returned."))
 ((name . "promise?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (desc . "The promise? procedure returns #t if its argument is a promise, and #f otherwise. Note that promises are not necessarily disjoint from other Scheme types such as procedures.")))
