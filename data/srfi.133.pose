(((name . make-vector) (signature lambda ((integer? k)) vector?))
 ((name . make-vector)
  (signature lambda ((integer? k) fill) vector?)
  (tags pure))
 ((name . vector) (signature lambda (obj ...) vector?) (tags pure))
 ((name . vector-unfold)
  (signature
   lambda
   ((procedure? f) (integer? length) initial-seed ...)
   vector?)
  (tags pure)
  (subsigs (f (lambda ((integer? index) seed ...) (values * * ...)))))
 ((name . vector-unfold-right)
  (signature
   lambda
   ((procedure? f) (integer? length) initial-seed ...)
   vector?)
  (tags pure)
  (subsigs (f (lambda ((integer? index) seed ...) (values * * ...)))))
 ((name . vector-copy)
  (signature lambda ((vector? vector)) vector?)
  (tags pure))
 ((name . vector-copy)
  (signature lambda ((vector? vector) (integer? start)) vector?)
  (tags pure))
 ((name . vector-copy)
  (signature lambda ((vector? vector) (integer? start) (integer? end)) vector?)
  (tags pure))
 ((name . vector-reverse-copy)
  (signature lambda ((vector? vector)) vector?)
  (tags pure))
 ((name . vector-reverse-copy)
  (signature lambda ((vector? vector) (integer? start)) vector?)
  (tags pure))
 ((name . vector-reverse-copy)
  (signature lambda ((vector? vector) (integer? start) (integer? end)) vector?)
  (tags pure))
 ((name . vector-append)
  (signature lambda ((vector? vector) ...) vector?)
  (tags pure))
 ((name . vector-concatenate)
  (signature lambda ((list? list-of-vectors) ...) vector?)
  (tags pure))
 ((name . vector-append-subvectors)
  (signature
   lambda
   ((vector? vec1) (integer? start1) (integer? end1) ...)
   vector?)
  (tags pure))
 ((name . vector?) (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . vector-empty?)
  (signature lambda ((vector? vec)) boolean?)
  (tags pure))
 ((name . vector=)
  (signature lambda ((procedure? elt=?) (vector? vec) ...) boolean?)
  (tags pure)
  (subsigs (elt=? (lambda (a b) boolean?))))
 ((name . vector-ref)
  (signature lambda ((vector? vector) (integer? k)) *)
  (tags pure))
 ((name . vector-length)
  (signature lambda ((vector? vector)) integer?)
  (tags pure))
 ((name . vector-fold)
  (signature
   lambda
   ((procedure? kons) knil (vector? vec1) (vector? vec2) ...)
   *)
  (tags pure)
  (subsigs (kons (lambda (state obj1 obj2 ...) *))))
 ((name . vector-fold-right)
  (signature
   lambda
   ((procedure? kons) knil (vector? vec1) (vector? vec2) ...)
   *)
  (tags pure)
  (subsigs (kons (lambda (state obj1 obj2 ...) *))))
 ((name . vector-map)
  (signature
   lambda
   ((procedure? proc) (vector? vector1) (vector? vector2) ...)
   vector?)
  (tags pure)
  (subsigs (proc (lambda (obj ...) *))))
 ((name . vector-map!)
  (signature
   lambda
   ((procedure? proc) (vector? vector1) (vector? vector2) ...)
   undefined)
  (subsigs (proc (lambda (obj ...) *))))
 ((name . vector-for-each)
  (signature
   lambda
   ((procedure? proc) (vector? vector1) (vector? vector2) ...)
   undefined)
  (subsigs (proc (lambda (obj ...) undefined))))
 ((name . vector-count)
  (signature
   lambda
   ((procedure? pred?) (vector? vec1) (vector? vec2) ...)
   integer?)
  (tags pure)
  (subsigs (pred? (lambda (obj1 obj2 ...) *))))
 ((name . vector-cumulate)
  (signature lambda ((procedure? f) knil (vector? vec)) vector?)
  (tags pure)
  (subsigs (f (lambda (obj1 obj2) *))))
 ((name . vector-index)
  (signature
   lambda
   ((procedure? pred?) (vector? vec1) (vector? vec2) ...)
   (or integer? #f))
  (tags pure)
  (subsigs (pred? (lambda (obj1 obj2 ...) *))))
 ((name . vector-index-right)
  (signature
   lambda
   ((procedure? pred?) (vector? vec1) (vector? vec2) ...)
   (or integer? #f))
  (tags pure)
  (subsigs (pred? (lambda (obj1 obj2 ...) *))))
 ((name . vector-skip)
  (signature
   lambda
   ((procedure? pred?) (vector? vec1) (vector? vec2) ...)
   (or integer? #f))
  (tags pure)
  (subsigs (pred? (lambda (obj1 obj2 ...) *))))
 ((name . vector-skip-right)
  (signature
   lambda
   ((procedure? pred?) (vector? vec1) (vector? vec2) ...)
   (or integer? #f))
  (tags pure)
  (subsigs (pred? (lambda (obj1 obj2 ...) *))))
 ((name . vector-binary-search)
  (signature lambda ((vector? vec) value (procedure? cmp)) (or integer? #f))
  (tags pure)
  (subsigs (cmp (lambda (a b) integer?))))
 ((name . vector-any)
  (signature lambda ((procedure? pred?) (vector? vec1) (vector? vec2) ...) *)
  (tags pure)
  (subsigs (pred? (lambda (obj1 obj2 ...) *))))
 ((name . vector-every)
  (signature lambda ((procedure? pred?) (vector? vec1) (vector? vec2) ...) *)
  (tags pure)
  (subsigs (pred? (lambda (obj1 obj2 ...) *))))
 ((name . vector-partition)
  (signature
   lambda
   ((procedure? pred?) (vector? vec))
   (values vector? integer?))
  (tags pure)
  (subsigs (pred? (lambda (obj) boolean?))))
 ((name . vector-set!)
  (signature lambda ((vector? vector) (integer? k) obj) undefined))
 ((name . vector-swap!)
  (signature lambda ((vector? vector) (integer? i) (integer? j)) undefined))
 ((name . vector-fill!) (signature lambda ((vector? vector) fill) undefined))
 ((name . vector-fill!)
  (signature lambda ((vector? vector) fill (integer? start)) undefined))
 ((name . vector-fill!)
  (signature
   lambda
   ((vector? vector) fill (integer? start) (integer? end))
   undefined))
 ((name . vector-reverse!) (signature lambda ((vector? vector)) undefined))
 ((name . vector-reverse!)
  (signature lambda ((vector? vector) (integer? start)) undefined))
 ((name . vector-reverse!)
  (signature
   lambda
   ((vector? vector) (integer? start) (integer? end))
   undefined))
 ((name . vector-copy!)
  (signature lambda ((vector? to) (integer? at) (vector? from)) undefined))
 ((name . vector-copy!)
  (signature
   lambda
   ((vector? to) (integer? at) (vector? from) (integer? start))
   undefined))
 ((name . vector-copy!)
  (signature
   lambda
   ((vector? to) (integer? at) (vector? from) (integer? start) (integer? end))
   undefined))
 ((name . vector-reverse-copy!)
  (signature lambda ((vector? to) (integer? at) (vector? from)) undefined))
 ((name . vector-reverse-copy!)
  (signature
   lambda
   ((vector? to) (integer? at) (vector? from) (integer? start))
   undefined))
 ((name . vector-reverse-copy!)
  (signature
   lambda
   ((vector? to) (integer? at) (vector? from) (integer? start) (integer? end))
   undefined))
 ((name . vector-unfold!)
  (signature
   lambda
   ((procedure? f)
    (vector? vec)
    (integer? start)
    (integer? end)
    initial-seed
    ...)
   undefined)
  (subsigs (f (lambda ((integer? index) seed ...) (values * * ...)))))
 ((name . vector-unfold-right!)
  (signature
   lambda
   ((procedure? f)
    (vector? vec)
    (integer? start)
    (integer? end)
    initial-seed
    ...)
   undefined)
  (subsigs (f (lambda ((integer? index) seed ...) (values * * ...)))))
 ((name . vector->list)
  (signature lambda ((vector? vector)) list?)
  (tags pure))
 ((name . vector->list)
  (signature lambda ((vector? vector) (integer? start)) list?)
  (tags pure))
 ((name . vector->list)
  (signature lambda ((vector? vector) (integer? start) (integer? end)) list?)
  (tags pure))
 ((name . reverse-vector->list)
  (signature lambda ((vector? vector)) list?)
  (tags pure))
 ((name . reverse-vector->list)
  (signature lambda ((vector? vector) (integer? start)) list?)
  (tags pure))
 ((name . reverse-vector->list)
  (signature lambda ((vector? vector) (integer? start) (integer? end)) list?)
  (tags pure))
 ((name . list->vector) (signature lambda ((list? list)) vector?) (tags pure))
 ((name . reverse-list->vector)
  (signature lambda ((list? list)) vector?)
  (tags pure))
 ((name . string->vector)
  (signature lambda ((string? string)) vector?)
  (tags pure))
 ((name . string->vector)
  (signature lambda ((string? string) (integer? start)) vector?)
  (tags pure))
 ((name . string->vector)
  (signature lambda ((string? string) (integer? start) (integer? end)) vector?)
  (tags pure))
 ((name . vector->string)
  (signature lambda ((vector? vector)) string?)
  (tags pure))
 ((name . vector->string)
  (signature lambda ((vector? vector) (integer? start)) string?)
  (tags pure))
 ((name . vector->string)
  (signature lambda ((vector? vector) (integer? start) (integer? end)) string?)
  (tags pure)))
