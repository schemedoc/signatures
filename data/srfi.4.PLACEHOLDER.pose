(((name . "@vector?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (desc . "Returns #t if the if an object is homogenous @vector, #f otherwise."))
 ((name . "make-@vector")
  (signature
   case-lambda
   (((integer? size)) @vector?)
   (((integer? size) (@?-ELTYPE fill)) @vector?))
  (tags pure)
  (desc . "Create homogenous @ vector. If fill is given, it must be @-DESC. If fill isn't given, vector is filled with unspecified values which are guaranteed to fit into the range of the @vector."))
 ((name . "@vector")
  (signature lambda ((@?-ELTYPE value) ...) @vector?)
  (tags pure)
  (desc . "Create homogenous @ vector. Each value must be @-DESC."))
 ((name . "@vector-length")
  (signature lambda ((@vector? vec)) integer?)
  (tags pure)
  (desc . "Returns the number of elements in @vector as an exact integer."))
 ((name . "@vector-ref")
  (signature lambda ((@vector? vec) (integer? i)) @?-ELTYPE)
  (tags pure)
  (desc . "Returns i-th element in the vector. i must be in range [0, (@vector-length vec))"))
 ((name . "@vector-set!")
  (signature lambda ((@vector? vec) (integer? i) (@?-ELTYPE value)) undefined)
  (desc . "@vector-set! stores value in element k of vector. Value must be @-DESC. i must be in range [0, (@vector-length vec))"))
 ((name . "@vector->list")
  (signature lambda ((@vector? vec)) list?)
  (tags pure)
  (desc . "Converts a homogenous vector to a list."))
 ((name . "list->@vector")
  (signature lambda ((list? proper-list)) @vector?)
  (subsigs
    (proper-list (list @?-ELTYPE)))
  (tags pure)
  (desc . "Converts a list to a homogenous @vector. Each element in input list must be @-DESC.")))
