(((name . boolean-compare)
  (signature lambda ((boolean? bool1) (boolean? bool2)) integer?)
  (tags pure))
 ((name . char-compare)
  (signature lambda ((char? char1) (char? char2)) integer?)
  (tags pure))
 ((name . char-compare-ci)
  (signature lambda ((char? char1) (char? char2)) integer?)
  (tags pure))
 ((name . string-compare)
  (signature lambda ((string? string1) (string? string2)) integer?)
  (tags pure))
 ((name . string-compare-ci)
  (signature lambda ((string? string1) (string? string2)) integer?)
  (tags pure))
 ((name . symbol-compare)
  (signature lambda ((symbol? symbol1) (symbol? symbol2)) integer?)
  (tags pure))
 ((name . integer-compare)
  (signature lambda ((integer? integer1) (integer? integer2)) integer?)
  (tags pure))
 ((name . rational-compare)
  (signature lambda ((rational? rational1) (rational? rational2)) integer?)
  (tags pure))
 ((name . real-compare)
  (signature lambda ((real? real1) (real? real2)) integer?)
  (tags pure))
 ((name . complex-compare)
  (signature lambda ((complex? complex1) (complex? complex2)) integer?)
  (tags pure))
 ((name . number-compare)
  (signature lambda ((number? number1) (number? number2)) integer?)
  (tags pure))
 ((name . vector-compare)
  (signature lambda ((vector? x) (vector? y)) integer?)
  (tags pure))
 ((name . vector-compare)
  (signature lambda ((procedure? compare) (vector? x) (vector? y)) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (el1 el2) integer?))))
 ((name . vector-compare)
  (signature lambda (x y (procedure? size) (procedure? ref)) integer?)
  (tags pure)
  (subsigs
    (size (lambda (seq) integer?))
    (ref (lambda (seq index) *))))
 ((name . vector-compare)
  (signature lambda ((procedure? compare) x y (procedure? size) (procedure? ref)) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (el1 el2) integer?))
    (size (lambda (seq) integer?))
    (ref (lambda (seq index) *))))
 ((name . vector-compare-as-list)
  (signature lambda ((vector? x) (vector? y)) integer?)
  (tags pure))
 ((name . vector-compare-as-list)
  (signature lambda ((procedure? compare) (vector? x) (vector? y)) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (el1 el2) integer?))))
 ((name . vector-compare-as-list)
  (signature lambda (x y (procedure? size) (procedure? ref)) integer?)
  (tags pure)
  (subsigs
    (size (lambda (seq) integer?))
    (ref (lambda (seq index) *))))
 ((name . vector-compare-as-list)
  (signature lambda ((procedure? compare) x y (procedure? size) (procedure? ref)) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (el1 el2) integer?))
    (size (lambda (seq) integer?))
    (ref (lambda (seq index) *))))
 ((name . list-compare)
  (signature lambda ((list? x) (list? y)) integer?)
  (tags pure))
 ((name . list-compare)
  (signature lambda ((procedure? compare) (list? x) (list? y)) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (el1 el2) integer?))))
 ((name . list-compare)
  (signature lambda (x y (procedure? empty?) (procedure? head) (procedure? tail)) integer?)
  (tags pure)
  (subsigs
    (empty? (lambda (seq) boolean?))
    (head (lambda (seq) *))
    (tail (lambda (seq) *))))
 ((name . list-compare)
  (signature lambda ((procedure? compare) x y (procedure? empty?) (procedure? head) (procedure? tail)) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (el1 el2) integer?))
    (empty? (lambda (seq) boolean?))
    (head (lambda (seq) *))
    (tail (lambda (seq) *))))
 ((name . list-compare-as-vector)
  (signature lambda ((list? x) (list? y)) integer?)
  (tags pure))
 ((name . list-compare-as-vector)
  (signature lambda ((procedure? compare) (list? x) (list? y)) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (el1 el2) integer?))))
 ((name . list-compare-as-vector)
  (signature lambda (x y (procedure? empty?) (procedure? head) (procedure? tail)) integer?)
  (tags pure)
  (subsigs
    (empty? (lambda (seq) boolean?))
    (head (lambda (seq) *))
    (tail (lambda (seq) *))))
 ((name . list-compare-as-vector)
  (signature lambda ((procedure? compare) x y (procedure? empty?) (procedure? head) (procedure? tail)) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (el1 el2) integer?))
    (empty? (lambda (seq) boolean?))
    (head (lambda (seq) *))
    (tail (lambda (seq) *))))
 ((name . pair-compare-car)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda ((pair? p1) (pair? p2)) integer?))))
 ((name . pair-compare-cdr)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda ((pair? p1) (pair? p2)) integer?))))
 ((name . pair-compare)
  (signature lambda ((procedure? compare-car) (procedure? compare-cdr) (pair? pair1) (pair? pair2)) integer?)
  (tags pure)
  (subsigs
    (compare-car (lambda (x y) integer?))
    (compare-cdr (lambda (x y) integer?))))
 ((name . pair-compare)
  (signature lambda (obj1 obj2) integer?)
  (tags pure))
 ((name . pair-compare)
  (signature lambda ((procedure? compare) obj1 obj2) integer?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . default-compare)
  (signature lambda (obj1 obj2) integer?)
  (tags pure))
 ((name . refine-compare)
  (signature syntax-rules ()
             ((_ compare-expression ...) integer?))
  (syntax-param-signatures
    (compare-expression integer?)))
 ((name . select-compare)
  (signature syntax-rules (else)
             ((_ x y (type? c1 ...) ...) integer?)
             ((_ x y (type? c1 ...) ... (else c1 ...)) integer?))
  (syntax-param-signatures
    (c integer?)
    (type? procedure?)))
 ((name . cond-compare)
  (signature syntax-rules (else)
             ((_ x y ((t1 t2) c1 ...) ...) integer?)
             ((_ x y ((t1 t2) c1 ...) ... (else c1 ...)) integer?))
  (syntax-param-signatures
    (t boolean?)
    (c integer?)
    (type? procedure?)))
 ((name . if3)
  (signature syntax-rules ()
             ((_ c less equal greater)))
  (syntax-param-signatures
    (c integer?)))
 ((name . if=?)
  (signature syntax-rules ()
             ((_ c consequent))
             ((_ c consequent alternate)))
  (syntax-param-signatures
    (c integer?)))
 ((name . if<?)
  (signature syntax-rules ()
             ((_ c consequent))
             ((_ c consequent alternate)))
  (syntax-param-signatures
    (c integer?)))
 ((name . if>?)
  (signature syntax-rules ()
             ((_ c consequent))
             ((_ c consequent alternate)))
  (syntax-param-signatures
    (c integer?)))
 ((name . if<=?)
  (signature syntax-rules ()
             ((_ c consequent))
             ((_ c consequent alternate)))
  (syntax-param-signatures
    (c integer?)))
 ((name . if>=?)
  (signature syntax-rules ()
             ((_ c consequent))
             ((_ c consequent alternate)))
  (syntax-param-signatures
    (c integer?)))
 ((name . if-not=?)
  (signature syntax-rules ()
             ((_ c consequent))
             ((_ c consequent alternate)))
  (syntax-param-signatures
    (c integer?)))
 ((name . =?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y) boolean?))))
 ((name . =?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y) boolean?))))
 ((name . =?)
  (signature lambda (x y) boolean?)
  (tags pure))
 ((name . =?)
  (signature lambda ((procedure? compare) x y) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . <?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y) boolean?))))
 ((name . <?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y) boolean?))))
 ((name . <?)
  (signature lambda (x y) boolean?)
  (tags pure))
 ((name . <?)
  (signature lambda ((procedure? compare) x y) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . >?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y) boolean?))))
 ((name . >?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y) boolean?))))
 ((name . >?)
  (signature lambda (x y) boolean?)
  (tags pure))
 ((name . >?)
  (signature lambda ((procedure? compare) x y) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . <=?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y) boolean?))))
 ((name . <=?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y) boolean?))))
 ((name . <=?)
  (signature lambda (x y) boolean?)
  (tags pure))
 ((name . <=?)
  (signature lambda ((procedure? compare) x y) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . >=?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y) boolean?))))
 ((name . >=?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y) boolean?))))
 ((name . >=?)
  (signature lambda (x y) boolean?)
  (tags pure))
 ((name . >=?)
  (signature lambda ((procedure? compare) x y) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . not=?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y) boolean?))))
 ((name . not=?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y) boolean?))))
 ((name . not=?)
  (signature lambda (x y) boolean?)
  (tags pure))
 ((name . not=?)
  (signature lambda ((procedure? compare) x y) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . </<?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y z) boolean?))))
 ((name . </<?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y z) boolean?))))
 ((name . </<?)
  (signature lambda (x y z) boolean?)
  (tags pure))
 ((name . </<?)
  (signature lambda ((procedure? compare) x y z) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . </<=?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y z) boolean?))))
 ((name . </<=?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y z) boolean?))))
 ((name . </<=?)
  (signature lambda (x y z) boolean?)
  (tags pure))
 ((name . </<=?)
  (signature lambda ((procedure? compare) x y z) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . <=/<?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y z) boolean?))))
 ((name . <=/<?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y z) boolean?))))
 ((name . <=/<?)
  (signature lambda (x y z) boolean?)
  (tags pure))
 ((name . <=/<?)
  (signature lambda ((procedure? compare) x y z) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . <=/<=?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y z) boolean?))))
 ((name . <=/<=?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y z) boolean?))))
 ((name . <=/<=?)
  (signature lambda (x y z) boolean?)
  (tags pure))
 ((name . <=/<=?)
  (signature lambda ((procedure? compare) x y z) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . >/>?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y z) boolean?))))
 ((name . >/>?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y z) boolean?))))
 ((name . >/>?)
  (signature lambda (x y z) boolean?)
  (tags pure))
 ((name . >/>?)
  (signature lambda ((procedure? compare) x y z) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . >/>=?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y z) boolean?))))
 ((name . >/>=?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y z) boolean?))))
 ((name . >/>=?)
  (signature lambda (x y z) boolean?)
  (tags pure))
 ((name . >/>=?)
  (signature lambda ((procedure? compare) x y z) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . >=/>?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y z) boolean?))))
 ((name . >=/>?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y z) boolean?))))
 ((name . >=/>?)
  (signature lambda (x y z) boolean?)
  (tags pure))
 ((name . >=/>?)
  (signature lambda ((procedure? compare) x y z) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . >=/>=?)
  (signature lambda () procedure?)
  (tags pure)
  (subsigs
    (return (lambda (x y z) boolean?))))
 ((name . >=/>=?)
  (signature lambda ((procedure? compare)) procedure?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y z) boolean?))))
 ((name . >=/>=?)
  (signature lambda (x y z) boolean?)
  (tags pure))
 ((name . >=/>=?)
  (signature lambda ((procedure? compare) x y z) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . chain=?)
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . chain<?)
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . chain>?)
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . chain<=?)
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . chain>=?)
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . pairwise-not=?)
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . min-compare)
  (signature lambda ((procedure? compare) x1 x2 ...) *)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . max-compare)
  (signature lambda ((procedure? compare) x1 x2 ...) *)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . kth-largest)
  (signature lambda ((procedure? compare) (integer? k) x1 x2 ...) *)
  (tags pure)
  (subsigs
    (compare (lambda (x y) integer?))))
 ((name . compare-by<)
  (signature lambda ((procedure? lt-pred)) procedure?)
  (tags pure)
  (subsigs
    (lt-pred (lambda (x y) boolean?))
    (return (lambda (x y) integer?))))
 ((name . compare-by<)
  (signature lambda ((procedure? lt-pred) x y) integer?)
  (tags pure)
  (subsigs
    (lt-pred (lambda (x y) boolean?))))
 ((name . compare-by>)
  (signature lambda ((procedure? gt-pred)) procedure?)
  (tags pure)
  (subsigs
    (gt-pred (lambda (x y) boolean?))
    (return (lambda (x y) integer?))))
 ((name . compare-by>)
  (signature lambda ((procedure? gt-pred) x y) integer?)
  (tags pure)
  (subsigs
    (gt-pred (lambda (x y) boolean?))))
 ((name . compare-by<=)
  (signature lambda ((procedure? le-pred)) procedure?)
  (tags pure)
  (subsigs
    (le-pred (lambda (x y) boolean?))
    (return (lambda (x y) integer?))))
 ((name . compare-by<=)
  (signature lambda ((procedure? le-pred) x y) integer?)
  (tags pure)
  (subsigs
    (le-pred (lambda (x y) boolean?))))
 ((name . compare-by>=)
  (signature lambda ((procedure? ge-pred)) procedure?)
  (tags pure)
  (subsigs
    (ge-pred (lambda (x y) boolean?))
    (return (lambda (x y) integer?))))
 ((name . compare-by>=)
  (signature lambda ((procedure? ge-pred) x y) integer?)
  (tags pure)
  (subsigs
    (ge-pred (lambda (x y) boolean?))))
 ((name . compare-by=/<)
  (signature lambda ((procedure? eq-pred) (procedure? lt-pred)) procedure?)
  (tags pure)
  (subsigs
    (eq-pred (lambda (x y) boolean?))
    (lt-pred (lambda (x y) boolean?))
    (return (lambda (x y) integer?))))
 ((name . compare-by=/<)
  (signature lambda ((procedure? eq-pred) (procedure? lt-pred) x y) integer?)
  (tags pure)
  (subsigs
    (eq-pred (lambda (x y) boolean?))
    (lt-pred (lambda (x y) boolean?))))
 ((name . compare-by=/>)
  (signature lambda ((procedure? eq-pred) (procedure? gt-pred)) procedure?)
  (tags pure)
  (subsigs
    (eq-pred (lambda (x y) boolean?))
    (gt-pred (lambda (x y) boolean?))
    (return (lambda (x y) integer?))))
 ((name . compare-by=/<)
  (signature lambda ((procedure? eq-pred) (procedure? gt-pred) x y) integer?)
  (tags pure)
  (subsigs
    (eq-pred (lambda (x y) boolean?))
    (gt-pred (lambda (x y) boolean?))))
 ((name . debug-compare)
  (signature lambda ((procedure? compare)) procedure?)
  (subsigs
    (compare (lambda (x y) integer?))
    (return (lambda (x y) integer?)))))
