(((group
    ((name . "char-upcase") (signature lambda ((char? char)) char?) (tags pure))
    ((name . "char-downcase") (signature lambda ((char? char)) char?) (tags pure))
    ((name . "char-titlecase")
     (signature lambda ((char? char)) char?)
     (tags pure))
    ((name . "char-foldcase") (signature lambda ((char? char)) char?) (tags pure)))
  (desc . "These procedures take a character argument and return a character result. If the argument is an upper-case or title-case character, and if there is a single character that is its lower-case form, then char-downcase returns that character. If the argument is a lower-case or title-case character, and there is a single character that is its upper-case form, then char-upcase returns that character. If the argument is a lower-case or upper-case character, and there is a single character that is its title-case form, then char-titlecase returns that character. If the argument is not a title-case character and there is no single character that is its title-case form, then char-titlecase returns the upper-case form of the argument. Finally, if the character has a case-folded character, then char-foldcase returns that character. Otherwise the character returned is the same as the argument. For Turkic characters İ (#\\x130) and ı (#\\x131), char-foldcase behaves as the identity function; otherwise char-foldcase is the same as char-downcase composed with char-upcase."))
 ((group
    ((name . "char-ci<=?")
     (signature lambda ((char? char1) (char? char2) (char? char3) ...) boolean?)
     (tags pure))
    ((name . "char-ci<?")
     (signature lambda ((char? char1) (char? char2) (char? char3) ...) boolean?)
     (tags pure))
    ((name . "char-ci=?")
     (signature lambda ((char? char1) (char? char2) (char? char3) ...) boolean?)
     (tags pure))
    ((name . "char-ci>=?")
     (signature lambda ((char? char1) (char? char2) (char? char3) ...) boolean?)
     (tags pure))
    ((name . "char-ci>?")
     (signature lambda ((char? char1) (char? char2) (char? char3) ...) boolean?)
     (tags pure)))
  (desc . "These procedures are similar to char=?, etc., but operate on the case-folded versions of the characters."))
 ((group
    ((name . "char-alphabetic?")
     (signature lambda ((char? char)) boolean?)
     (tags pure))
    ((name . "char-numeric?")
     (signature lambda ((char? char)) boolean?)
     (tags pure))
    ((name . "char-whitespace?")
     (signature lambda ((char? char)) boolean?)
     (tags pure))
    ((name . "char-upper-case?")
     (signature lambda ((char? char)) boolean?)
     (tags pure))
    ((name . "char-lower-case?")
     (signature lambda ((char? char)) boolean?)
     (tags pure))
    ((name . "char-title-case?")
     (signature lambda ((char? char)) boolean?)
     (tags pure)))
  (desc . "These procedures return #t if their arguments are alphabetic, numeric, whitespace, upper-case, lower-case, or title-case characters, respectively; otherwise they return #f.
A character is alphabetic if it has the Unicode \"Alphabetic\" property. A character is numeric if it has the Unicode \"Numeric\" property. A character is whitespace if has the Unicode \"White_Space\" property. A character is upper case if it has the Unicode \"Uppercase\" property, lower case if it has the \"Lowercase\" property, and title case if it is in the Lt general category."))
 ((name . "char-general-category")
  (signature lambda ((char? char)) symbol?)
  (tags pure)
  (desc . "Returns a symbol representing the Unicode general category of char, one of Lu, Ll, Lt, Lm, Lo, Mn, Mc, Me, Nd, Nl, No, Ps, Pe, Pi, Pf, Pd, Pc, Po, Sc, Sm, Sk, So, Zs, Zp, Zl, Cc, Cf, Cs, Co, or Cn."))
 ((group
    ((name . "string-upcase")
     (signature lambda ((string? string)) string?)
     (tags pure))
    ((name . "string-downcase")
     (signature lambda ((string? string)) string?)
     (tags pure))
    ((name . "string-titlecase")
     (signature lambda ((string? string)) string?)
     (tags pure))
    ((name . "string-foldcase")
     (signature lambda ((string? string)) string?)
     (tags pure)))
  (desc . "These procedures take a string argument and return a string result. They are defined in terms of Unicode's locale-independent case mappings from Unicode scalar-value sequences to scalar-value sequences. In particular, the length of the result string can be different from the length of the input string. When the specified result is equal in the sense of string=? to the argument, these procedures may return the argument instead of a newly allocated string.
The string-upcase procedure converts a string to upper case; string-downcase converts a string to lower case. The string-foldcase procedure converts the string to its case-folded counterpart, using the full case-folding mapping, but without the special mappings for Turkic languages. The string-titlecase procedure converts the first cased character of each word via char-titlecase, and downcases all other cased characters."))
 ((group
    ((name . "string-ci<=?")
     (signature
       lambda
       ((string? string1) (string? string2) (string? string3) ...)
       boolean?)
     (tags pure))
    ((name . "string-ci<?")
     (signature
       lambda
       ((string? string1) (string? string2) (string? string3) ...)
       boolean?)
     (tags pure))
    ((name . "string-ci=?")
     (signature
       lambda
       ((string? string1) (string? string2) (string? string3) ...)
       boolean?)
     (tags pure))
    ((name . "string-ci>=?")
     (signature
       lambda
       ((string? string1) (string? string2) (string? string3) ...)
       boolean?)
     (tags pure))
    ((name . "string-ci>?")
     (signature
       lambda
       ((string? string1) (string? string2) (string? string3) ...)
       boolean?)
     (tags pure)))
  (desc . "These procedures are similar to string=?, etc., but operate on the case-folded versions of the strings."))
 ((group
    ((name . "string-normalize-nfd")
     (signature lambda ((string? string)) string?)
     (tags pure))
    ((name . "string-normalize-nfkd")
     (signature lambda ((string? string)) string?)
     (tags pure))
    ((name . "string-normalize-nfc")
     (signature lambda ((string? string)) string?)
     (tags pure))
    ((name . "string-normalize-nfkc")
     (signature lambda ((string? string)) string?)
     (tags pure)))
  (desc . "These procedures take a string argument and return a string result, which is the input string normalized to Unicode normalization form D, KD, C, or KC, respectively. When the specified result is equal in the sense of string=? to the argument, these procedures may return the argument instead of a newly allocated string.")))
